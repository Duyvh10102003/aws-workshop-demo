[
{
	"uri": "//localhost:1313/vi/",
	"title": "Automated Testing with AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Workshop: Kiểm thử tự động với AWS CodeBuild và thực thi song song Tổng quan Trong workshop này, bạn sẽ học cách xây dựng một hệ thống kiểm thử tự động hiện đại cho ứng dụng web viết bằng .NET 8 MVC, sử dụng các dịch vụ AWS như CodeBuild, CloudWatch, và CodeQL.\nThông qua từng phần thực hành, bạn sẽ:\nThiết lập pipeline CI kiểm thử tự động khi push code lên GitHub Thực thi kiểm thử song song (parallel execution) để tối ưu thời gian Tích hợp kiểm thử hiệu năng và bảo mật (CodeQL) Theo dõi logs, phân tích chi phí, và dọn dẹp tài nguyên sau workshop Dọn dẹp tài nguyên AWS sau khi thử nghiệm Nội dung workshop Giới thiệu \u0026amp; mục tiêu Chuẩn bị môi trường Thiết lập kiểm thử tự động Thực thi song song \u0026amp; tổng hợp kết quả Kiểm thử hiệu năng Kiểm thử bảo mật với CodeQL Theo dõi, báo cáo \u0026amp; tối ưu chi phí Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu Workshop",
	"tags": ["AWS", "DevOps", "CI/CD", "Automated Testing", ".NET 8"],
	"description": "Xây dựng hệ thống kiểm thử tự động nâng cao cho ứng dụng .NET 8 MVC với AWS CodeBuild và CodeQL",
	"content": "🧪 Workshop: Kiểm thử tự động với AWS CodeBuild và thực thi song song Automated Testing with AWS CodeBuild \u0026amp; Parallel Execution Giới thiệu Trong thế giới phát triển phần mềm hiện đại, chất lượng sản phẩm và tốc độ ra mắt đóng vai trò sống còn. Đó là lý do tại sao kiểm thử tự động (automated testing) và các công cụ CI/CD hiện đại trên nền tảng đám mây đang trở thành tiêu chuẩn không thể thiếu.\n🎯 Mục tiêu workshop Workshop này giúp bạn triển khai hệ thống kiểm thử tự động toàn diện cho ứng dụng web viết bằng .NET 8 MVC, với các nội dung thực hành chuyên sâu như:\n✅ Tự động hóa kiểm thử mỗi khi đẩy mã lên GitHub ⚙️ Thực thi kiểm thử song song để tối ưu thời gian build 📈 Tích hợp kiểm thử hiệu năng (Performance Testing) 🔐 Kiểm thử bảo mật bằng GitHub CodeQL 💰 Theo dõi chi phí \u0026amp; tối ưu hóa tài nguyên AWS sử dụng Đây là một workshop thực tiễn, mang tính ứng dụng cao, phù hợp cho:\nSinh viên CNTT cần hoàn thành đề tài thực tập hoặc project tốt nghiệp Lập trình viên mới muốn học CI/CD với AWS DevOps Intern muốn hiểu rõ testing pipeline thực tế "
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.4-analyze-performance/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.1-enable-codeql/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.2-review-alerts/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.3-fix-vulnerabilities/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.4-disable-if-needed/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.1-cloudwatch-logs/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.2-analyze-cost/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.3-optimize-config/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.4-estimate-usage/",
	"title": "Tạo ứng dụng .NET MVC có kiểm thử ",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị ứng dụng .NET MVC Trong bước này, bạn sẽ tạo một ứng dụng web viết bằng .NET 8 MVC có sẵn một số unit test đơn giản để phục vụ các phần kiểm thử tự động sau.\n🎯 Mục tiêu Tạo một ứng dụng .NET 8 MVC mới Thêm một project kiểm thử (Web.Tests) Viết ít nhất 1 test đơn vị cơ bản Đảm bảo chạy test thành công bằng dòng lệnh 🔧 Các bước thực hiện Bước 1: Tạo solution và project chính Bước 2: Tạo project kiểm thử Bước 3: Viết một test đơn vị đơn giản 4: Chạy thử nghiệm kiểm thử 📦 Kết quả đầu ra 📌 Lưu ý Hãy đảm bảo bạn đang sử dụng .NET SDK 8.0\nCó thể tạo thêm các test khác để sử dụng trong phần song song và hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.1-multiple-tests/",
	"title": "Thiết lập Nhiều Kiểm thử",
	"tags": [],
	"description": "",
	"content": "Thiết lập Nhiều Dự án Kiểm thử Tổng quan Trong phần này, chúng ta sẽ tổ chức các dự án kiểm thử để chuẩn bị cho việc thực thi song song. Chúng ta sẽ tạo các danh mục kiểm thử khác nhau và cấu hình chúng để xử lý song song hiệu quả.\nCác bước Thực hiện 1. Tạo Cấu trúc Dự án Kiểm thử Tạo thư mục dự án kiểm thử: mkdir -p TestAutomationDemo.Tests.Unit mkdir -p TestAutomationDemo.Tests.Integration mkdir -p TestAutomationDemo.Tests.Performance Khởi tạo dự án kiểm thử: # Dự án Kiểm thử Đơn vị dotnet new xunit -n TestAutomationDemo.Tests.Unit dotnet add TestAutomationDemo.Tests.Unit/TestAutomationDemo.Tests.Unit.csproj reference TestAutomationDemo.csproj # Dự án Kiểm thử Tích hợp dotnet new xunit -n TestAutomationDemo.Tests.Integration dotnet add TestAutomationDemo.Tests.Integration/TestAutomationDemo.Tests.Integration.csproj reference TestAutomationDemo.csproj # Dự án Kiểm thử Hiệu năng dotnet new xunit -n TestAutomationDemo.Tests.Performance dotnet add TestAutomationDemo.Tests.Performance/TestAutomationDemo.Tests.Performance.csproj reference TestAutomationDemo.csproj 2. Cấu hình Danh mục Kiểm thử Thiết lập Kiểm thử Đơn vị: // TestAutomationDemo.Tests.Unit/CalculatorTests.cs namespace TestAutomationDemo.Tests.Unit { [Trait(\u0026#34;Category\u0026#34;, \u0026#34;Unit\u0026#34;)] [Trait(\u0026#34;Priority\u0026#34;, \u0026#34;1\u0026#34;)] public class CalculatorTests { [Fact] public void Add_ValidNumbers_ReturnsSum() { // Triển khai kiểm thử } } } Thiết lập Kiểm thử Tích hợp: // TestAutomationDemo.Tests.Integration/ApiTests.cs namespace TestAutomationDemo.Tests.Integration { [Trait(\u0026#34;Category\u0026#34;, \u0026#34;Integration\u0026#34;)] [Trait(\u0026#34;Priority\u0026#34;, \u0026#34;2\u0026#34;)] public class ApiTests { [Fact] public async Task Api_ReturnsExpectedResponse() { // Triển khai kiểm thử } } } Thiết lập Kiểm thử Hiệu năng: // TestAutomationDemo.Tests.Performance/LoadTests.cs namespace TestAutomationDemo.Tests.Performance { [Trait(\u0026#34;Category\u0026#34;, \u0026#34;Performance\u0026#34;)] [Trait(\u0026#34;Priority\u0026#34;, \u0026#34;3\u0026#34;)] public class LoadTests { [Fact] public async Task Api_HandlesMultipleRequests() { // Triển khai kiểm thử } } } 3. Cấu hình Cài đặt Kiểm thử Tạo file cài đặt kiểm thử: // testsettings.json { \u0026#34;TestSettings\u0026#34;: { \u0026#34;Parallelization\u0026#34;: { \u0026#34;MaxCpuCount\u0026#34;: 0, \u0026#34;Workers\u0026#34;: 3, \u0026#34;Scope\u0026#34;: \u0026#34;ClassLevel\u0026#34; }, \u0026#34;Categories\u0026#34;: { \u0026#34;Unit\u0026#34;: { \u0026#34;Priority\u0026#34;: 1, \u0026#34;Timeout\u0026#34;: \u0026#34;00:01:00\u0026#34; }, \u0026#34;Integration\u0026#34;: { \u0026#34;Priority\u0026#34;: 2, \u0026#34;Timeout\u0026#34;: \u0026#34;00:05:00\u0026#34; }, \u0026#34;Performance\u0026#34;: { \u0026#34;Priority\u0026#34;: 3, \u0026#34;Timeout\u0026#34;: \u0026#34;00:10:00\u0026#34; } } } } Cập nhật file dự án: \u0026lt;!-- Directory.Build.props --\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;VSTestLogger\u0026gt;trx\u0026lt;/VSTestLogger\u0026gt; \u0026lt;VSTestResultsDirectory\u0026gt;$(MSBuildProjectDirectory)/TestResults\u0026lt;/VSTestResultsDirectory\u0026gt; \u0026lt;CollectCoverage\u0026gt;true\u0026lt;/CollectCoverage\u0026gt; \u0026lt;CoverletOutputFormat\u0026gt;cobertura\u0026lt;/CoverletOutputFormat\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;/Project\u0026gt; 4. Tạo Script Chạy Kiểm thử Tạo script PowerShell: # run-tests.ps1 param( [string]$Category = \u0026#34;All\u0026#34;, [int]$Priority = 0 ) $testProjects = Get-ChildItem -Filter \u0026#34;*.Tests.*\u0026#34; -Directory foreach ($project in $testProjects) { if ($Category -eq \u0026#34;All\u0026#34; -or $project.Name -match $Category) { Write-Host \u0026#34;Đang chạy kiểm thử cho $($project.Name)\u0026#34; dotnet test $project.FullName ` --filter \u0026#34;Priority=$Priority\u0026#34; ` --logger \u0026#34;trx;LogFileName=$($project.Name).trx\u0026#34; } } Tạo script bash: #!/bin/bash # run-tests.sh category=${1:-\u0026#34;All\u0026#34;} priority=${2:-0} for project in $(find . -name \u0026#34;*.Tests.*\u0026#34; -type d); do if [ \u0026#34;$category\u0026#34; = \u0026#34;All\u0026#34; ] || [[ $project =~ $category ]]; then echo \u0026#34;Đang chạy kiểm thử cho $project\u0026#34; dotnet test \u0026#34;$project\u0026#34; \\ --filter \u0026#34;Priority=$priority\u0026#34; \\ --logger \u0026#34;trx;LogFileName=$(basename $project).trx\u0026#34; fi done Thực hành Tốt nhất về Tổ chức Kiểm thử Cấu trúc Dự án\nTách biệt các loại kiểm thử Quy ước đặt tên rõ ràng Nhóm logic Danh mục Kiểm thử\nĐặc điểm có ý nghĩa Mức độ ưu tiên Thứ tự thực thi Cấu hình\nCài đặt tập trung Cấu hình theo môi trường Thuộc tính có thể tái sử dụng Các bước Xác minh Xác minh cấu trúc dự án: dotnet sln list Chạy danh mục cụ thể: dotnet test --filter \u0026#34;Category=Unit\u0026#34; Kiểm tra phát hiện kiểm thử: dotnet test -t Bước tiếp theo Sau khi thiết lập nhiều dự án kiểm thử, tiếp tục với Cấu hình Thực thi Song song để học cách chạy các kiểm thử này song song.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.1-dotnet-app/",
	"title": "Thiết lập ứng dụng .NET",
	"tags": [],
	"description": "",
	"content": "Thiết lập ứng dụng .NET Tổng quan Trong phần này, chúng ta sẽ tạo một ứng dụng .NET 8 MVC mới làm dự án mẫu cho workshop. Chúng ta sẽ thiết lập một ứng dụng cơ bản với các dependency cần thiết cho việc kiểm thử tự động.\nYêu cầu tiên quyết Đã cài đặt .NET 8 SDK trên máy Hiểu biết cơ bản về C# và .NET MVC Một trình soạn thảo mã (khuyến nghị dùng Visual Studio Code) Các bước thực hiện 1. Kiểm tra cài đặt .NET Đầu tiên, kiểm tra xem bạn đã cài đặt .NET 8 SDK chưa:\ndotnet --version Kết quả hiển thị phải là phiên bản 8.0.x\n2. Tạo ứng dụng MVC Tạo thư mục mới và khởi tạo ứng dụng MVC:\nmkdir TestAutomationDemo cd TestAutomationDemo dotnet new mvc 3. Thêm các gói NuGet cần thiết Cài đặt các gói NuGet cần thiết cho việc kiểm thử:\ndotnet add package xunit --version 2.5.0 dotnet add package xunit.runner.visualstudio --version 2.5.0 dotnet add package Microsoft.NET.Test.Sdk --version 17.7.0 4. Tạo Controller mẫu Thêm một controller mới để phục vụ việc kiểm thử:\nusing Microsoft.AspNetCore.Mvc; namespace TestAutomationDemo.Controllers { public class CalculatorController : Controller { [HttpGet(\u0026#34;api/calculator/add/{a}/{b}\u0026#34;)] public IActionResult Add(int a, int b) { return Ok(new { result = a + b }); } [HttpGet(\u0026#34;api/calculator/multiply/{a}/{b}\u0026#34;)] public IActionResult Multiply(int a, int b) { return Ok(new { result = a * b }); } } } 5. Kiểm tra ứng dụng Build và chạy ứng dụng:\ndotnet build dotnet run Truy cập ứng dụng tại:\nTrang chủ: https://localhost:5001 API Máy tính: https://localhost:5001/api/calculator/add/5/3 Các bước xác nhận Đảm bảo ứng dụng được build không có lỗi Kiểm tra khả năng truy cập trang chủ Thử nghiệm các endpoint máy tính bằng trình duyệt hoặc Postman Xác nhận tất cả các gói NuGet đã được cài đặt đúng Các vấn đề thường gặp và giải pháp Nếu cổng 5001 đang được sử dụng, sửa file Properties/launchSettings.json Nếu gặp vấn đề về chứng chỉ SSL, chạy dotnet dev-certs https --trust Đối với vấn đề khôi phục gói, thử dotnet restore --force Bước tiếp theo Sau khi ứng dụng .NET của bạn chạy thành công, tiếp tục với phần Thiết lập GitHub Repository.\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.1-write-unit-tests/",
	"title": "Viết Kiểm thử Đơn vị",
	"tags": [],
	"description": "",
	"content": "Viết Kiểm thử Đơn vị Tổng quan Trong phần này, chúng ta sẽ tạo các kiểm thử đơn vị cho ứng dụng .NET sử dụng xUnit. Chúng ta sẽ tập trung vào việc viết các bài kiểm thử hiệu quả, dễ bảo trì và cung cấp độ bao phủ tốt cho logic ứng dụng.\nCác bước Thực hiện 1. Tạo Dự án Kiểm thử # Di chuyển đến thư mục giải pháp cd TestAutomationDemo # Tạo dự án kiểm thử dotnet new xunit -n TestAutomationDemo.Tests # Thêm tham chiếu dự án dotnet add TestAutomationDemo.Tests/TestAutomationDemo.Tests.csproj reference TestAutomationDemo.csproj 2. Thêm Các Phụ thuộc Kiểm thử cd TestAutomationDemo.Tests dotnet add package xunit --version 2.5.0 dotnet add package xunit.runner.visualstudio --version 2.5.0 dotnet add package Microsoft.NET.Test.Sdk --version 17.7.0 dotnet add package Moq --version 4.20.0 3. Tạo Cấu trúc Kiểm thử // CalculatorControllerTests.cs using Xunit; using Microsoft.AspNetCore.Mvc; using TestAutomationDemo.Controllers; namespace TestAutomationDemo.Tests { public class CalculatorControllerTests { private readonly CalculatorController _controller; public CalculatorControllerTests() { _controller = new CalculatorController(); } [Fact] public void Add_ValidNumbers_ReturnsCorrectSum() { // Arrange int a = 5; int b = 3; // Act var result = _controller.Add(a, b) as OkObjectResult; var value = (dynamic)result?.Value; // Assert Assert.NotNull(result); Assert.Equal(200, result.StatusCode); Assert.Equal(8, value.result); } [Fact] public void Multiply_ValidNumbers_ReturnsCorrectProduct() { // Arrange int a = 4; int b = 5; // Act var result = _controller.Multiply(a, b) as OkObjectResult; var value = (dynamic)result?.Value; // Assert Assert.NotNull(result); Assert.Equal(200, result.StatusCode); Assert.Equal(20, value.result); } [Theory] [InlineData(0, 5, 0)] [InlineData(1, 0, 0)] [InlineData(10, 1, 10)] public void Multiply_SpecialCases_ReturnsExpectedResult(int a, int b, int expected) { // Act var result = _controller.Multiply(a, b) as OkObjectResult; var value = (dynamic)result?.Value; // Assert Assert.Equal(expected, value.result); } } } 4. Thêm Danh mục Kiểm thử [Trait(\u0026#34;Category\u0026#34;, \u0026#34;Unit\u0026#34;)] public class CalculatorControllerTests { // ... các phương thức kiểm thử hiện có ... } 5. Chạy Kiểm thử Cục bộ # Chạy tất cả kiểm thử dotnet test # Chạy danh mục cụ thể dotnet test --filter \u0026#34;Category=Unit\u0026#34; # Chạy với đầu ra chi tiết dotnet test -l \u0026#34;console;verbosity=detailed\u0026#34; Các Thực hành Tốt nhất Quy ước Đặt tên Kiểm thử\nTênPhươngThức_KịchBản_HànhViMongĐợi Tên rõ ràng và mô tả Chỉ ra những gì đang được kiểm thử Cấu trúc Kiểm thử\nArrange: Thiết lập dữ liệu kiểm thử Act: Thực thi phương thức đang kiểm thử Assert: Xác minh kết quả Độ bao phủ Kiểm thử\nKiểm thử kịch bản tích cực Kiểm thử trường hợp biên Kiểm thử điều kiện lỗi Tổ chức Mã nguồn\nMột lớp kiểm thử cho mỗi lớp sản phẩm Nhóm các kiểm thử liên quan Sử dụng thuộc tính thích hợp Các Mẫu Kiểm thử Phổ biến Mẫu AAA (Arrange-Act-Assert) [Fact] public void PhuongThuc_KichBan_KetQuaMongDoi() { // Arrange var setup = new Setup(); // Act var result = setup.Execute(); // Assert Assert.Equal(expected, result); } Kiểm thử Theory [Theory] [InlineData(dauVao1, ketQuaMongDoi1)] [InlineData(dauVao2, ketQuaMongDoi2)] public void PhuongThuc_NhieuKichBan(dauVao, ketQuaMongDoi) { var ketQua = PhuongThuc(dauVao); Assert.Equal(ketQuaMongDoi, ketQua); } Các bước Xác nhận Tất cả kiểm thử đều pass cục bộ Độ bao phủ kiểm thử đầy đủ Kiểm thử được tổ chức hợp lý Tuân thủ quy ước đặt tên Bao gồm các trường hợp biên Bước tiếp theo Khi các kiểm thử đơn vị của bạn đã được viết và pass cục bộ, tiếp tục với phần Thiết lập BuildSpec để cấu hình thực thi kiểm thử tự động trong AWS CodeBuild.\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.1-write-performance-tests/",
	"title": "Viết Kiểm thử Hiệu năng",
	"tags": [],
	"description": "",
	"content": "Viết Kiểm thử Hiệu năng Tổng quan Trong phần này, chúng ta sẽ tạo các kiểm thử hiệu năng sử dụng k6, một công cụ kiểm thử tải hiện đại. Chúng ta sẽ viết các kiểm thử để đo lường thời gian phản hồi, thông lượng và việc sử dụng tài nguyên của ứng dụng .NET.\nCác bước Thực hiện 1. Cài đặt k6 Cài đặt trên Linux: sudo gpg -k sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69 echo \u0026#34;deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/k6.list sudo apt-get update sudo apt-get install k6 Cài đặt trên Windows: winget install k6 2. Tạo Kiểm thử Tải Cơ bản Tạo script kiểm thử: // basic-load-test.js import http from \u0026#39;k6/http\u0026#39;; import { check, sleep } from \u0026#39;k6\u0026#39;; export const options = { stages: [ { duration: \u0026#39;30s\u0026#39;, target: 20 }, // Tăng dần lên 20 người dùng { duration: \u0026#39;1m\u0026#39;, target: 20 }, // Duy trì 20 người dùng { duration: \u0026#39;30s\u0026#39;, target: 0 }, // Giảm xuống 0 người dùng ], thresholds: { http_req_duration: [\u0026#39;p(95)\u0026lt;500\u0026#39;], // 95% yêu cầu phải dưới 500ms http_req_failed: [\u0026#39;rate\u0026lt;0.01\u0026#39;], // Ít hơn 1% có thể thất bại }, }; export default function () { const BASE_URL = \u0026#39;https://localhost:5001\u0026#39;; // Kiểm thử các endpoint máy tính const responses = http.batch([ [\u0026#39;GET\u0026#39;, `${BASE_URL}/api/calculator/add/5/3`], [\u0026#39;GET\u0026#39;, `${BASE_URL}/api/calculator/multiply/4/6`], ]); // Kiểm tra phản hồi check(responses[0], { \u0026#39;trạng thái cộng là 200\u0026#39;: (r) =\u0026gt; r.status === 200, \u0026#39;kết quả cộng chính xác\u0026#39;: (r) =\u0026gt; JSON.parse(r.body).result === 8, }); check(responses[1], { \u0026#39;trạng thái nhân là 200\u0026#39;: (r) =\u0026gt; r.status === 200, \u0026#39;kết quả nhân chính xác\u0026#39;: (r) =\u0026gt; JSON.parse(r.body).result === 24, }); sleep(1); } 3. Tạo Kiểm thử Áp lực Tạo script kiểm thử áp lực: // stress-test.js import http from \u0026#39;k6/http\u0026#39;; import { check, sleep } from \u0026#39;k6\u0026#39;; export const options = { stages: [ { duration: \u0026#39;2m\u0026#39;, target: 100 }, // Tăng dần lên 100 người dùng { duration: \u0026#39;5m\u0026#39;, target: 100 }, // Duy trì 100 người dùng { duration: \u0026#39;2m\u0026#39;, target: 200 }, // Tăng lên 200 người dùng { duration: \u0026#39;5m\u0026#39;, target: 200 }, // Duy trì 200 người dùng { duration: \u0026#39;2m\u0026#39;, target: 0 }, // Giảm xuống 0 người dùng ], thresholds: { http_req_duration: [\u0026#39;p(99)\u0026lt;1500\u0026#39;], // 99% yêu cầu phải dưới 1.5s http_req_failed: [\u0026#39;rate\u0026lt;0.02\u0026#39;], // Ít hơn 2% có thể thất bại }, }; export default function () { const BASE_URL = \u0026#39;https://localhost:5001\u0026#39;; // Mô phỏng tính toán phức tạp const randomNumbers = Array.from( { length: 10 }, () =\u0026gt; Math.floor(Math.random() * 100) ); // Yêu cầu hàng loạt const requests = randomNumbers.map((num, index) =\u0026gt; { return [\u0026#39;GET\u0026#39;, `${BASE_URL}/api/calculator/multiply/${num}/${index + 1}`]; }); const responses = http.batch(requests); // Kiểm tra phản hồi responses.forEach((response, index) =\u0026gt; { check(response, { \u0026#39;trạng thái là 200\u0026#39;: (r) =\u0026gt; r.status === 200, \u0026#39;phản hồi hợp lệ\u0026#39;: (r) =\u0026gt; JSON.parse(r.body).result !== undefined, }); }); sleep(1); } 4. Tạo Thu thập Chỉ số Hiệu năng Tạo script chỉ số: // collect-metrics.js import { Counter, Gauge, Rate } from \u0026#39;k6/metrics\u0026#39;; import http from \u0026#39;k6/http\u0026#39;; // Chỉ số tùy chỉnh const tinhToanThanhCong = new Counter(\u0026#39;tinh_toan_thanh_cong\u0026#39;); const tinhToanThatBai = new Counter(\u0026#39;tinh_toan_that_bai\u0026#39;); const thoiGianPhanHoi = new Gauge(\u0026#39;thoi_gian_phan_hoi\u0026#39;); const tyLeThanhCong = new Rate(\u0026#39;ty_le_thanh_cong\u0026#39;); export const options = { scenarios: { tai_lien_tuc: { executor: \u0026#39;constant-vus\u0026#39;, vus: 10, duration: \u0026#39;5m\u0026#39;, }, }, }; export default function () { const BASE_URL = \u0026#39;https://localhost:5001\u0026#39;; // Ghi nhận thời gian phản hồi const thoiGianBatDau = new Date(); const response = http.get(`${BASE_URL}/api/calculator/add/5/3`); const thoiGianKetThuc = new Date(); // Cập nhật chỉ số thoiGianPhanHoi.add(thoiGianKetThuc - thoiGianBatDau); tyLeThanhCong.add(response.status === 200); if (response.status === 200) { tinhToanThanhCong.add(1); } else { tinhToanThatBai.add(1); } } Các Thực hành Tốt nhất Thiết kế Kiểm thử\nBắt đầu với kịch bản thực tế Bao gồm giai đoạn tăng tải Đặt ngưỡng phù hợp Giám sát tài nguyên hệ thống Dữ liệu Kiểm thử\nSử dụng dữ liệu đại diện Tránh giá trị tĩnh Xem xét dọn dẹp dữ liệu Xử lý cô lập kiểm thử Xử lý Lỗi\nĐặt tiêu chí thất bại Ghi log lỗi chi tiết Theo dõi tỷ lệ lỗi Triển khai thử lại Các bước Xác minh Chạy kiểm thử tải cơ bản: k6 run basic-load-test.js Chạy kiểm thử áp lực: k6 run stress-test.js Thu thập chỉ số: k6 run --out json=metrics.json collect-metrics.js Bước tiếp theo Sau khi viết các kiểm thử hiệu năng, tiếp tục với Tích hợp vào CI/CD để tự động hóa thực thi kiểm thử trong pipeline của bạn.\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.2-configure-parallel/",
	"title": "Cấu hình Thực thi Song song",
	"tags": [],
	"description": "",
	"content": "Cấu hình Thực thi Kiểm thử Song song Tổng quan Trong phần này, chúng ta sẽ cấu hình AWS CodeBuild và các dự án kiểm thử để thực thi kiểm thử song song, tối đa hóa việc sử dụng tài nguyên và giảm thời gian thực thi kiểm thử tổng thể.\nCác bước Thực hiện 1. Cấu hình CodeBuild cho Thực thi Song song Cập nhật buildspec.yml cho thực thi song song: version: 0.2 batch: fast-fail: false build-graph: - identifier: UnitTests env: compute-type: BUILD_GENERAL1_SMALL variables: TEST_CATEGORY: \u0026#34;Unit\u0026#34; buildspec: unit-buildspec.yml - identifier: IntegrationTests env: compute-type: BUILD_GENERAL1_MEDIUM variables: TEST_CATEGORY: \u0026#34;Integration\u0026#34; buildspec: integration-buildspec.yml - identifier: PerformanceTests env: compute-type: BUILD_GENERAL1_LARGE variables: TEST_CATEGORY: \u0026#34;Performance\u0026#34; buildspec: performance-buildspec.yml Tạo các file buildspec cho từng danh mục: # unit-buildspec.yml version: 0.2 phases: install: runtime-versions: dotnet: 8.0 build: commands: - dotnet test TestAutomationDemo.Tests.Unit/TestAutomationDemo.Tests.Unit.csproj --filter \u0026#34;Category=Unit\u0026#34; --logger \u0026#34;trx;LogFileName=unit-tests.trx\u0026#34; --results-directory /test-results artifacts: files: - /test-results/**/* name: unit-test-results 2. Cấu hình Song song hóa Kiểm thử Cập nhật cài đặt dự án kiểm thử: \u0026lt;!-- TestAutomationDemo.Tests.Unit/TestAutomationDemo.Tests.Unit.csproj --\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;ParallelizeTestCollections\u0026gt;true\u0026lt;/ParallelizeTestCollections\u0026gt; \u0026lt;MaxParallelThreads\u0026gt;4\u0026lt;/MaxParallelThreads\u0026gt; \u0026lt;/PropertyGroup\u0026gt; Cấu hình thuộc tính assembly: // AssemblyInfo.cs using Xunit; [assembly: CollectionBehavior(DisableTestParallelization = false, MaxParallelThreads = 4)] 3. Phân bổ Tài nguyên Tạo cấu hình tài nguyên: // parallel-config.json { \u0026#34;computeTypes\u0026#34;: { \u0026#34;UnitTests\u0026#34;: { \u0026#34;compute\u0026#34;: \u0026#34;BUILD_GENERAL1_SMALL\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;3GB\u0026#34;, \u0026#34;cpu\u0026#34;: \u0026#34;2 vCPU\u0026#34; }, \u0026#34;IntegrationTests\u0026#34;: { \u0026#34;compute\u0026#34;: \u0026#34;BUILD_GENERAL1_MEDIUM\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;7GB\u0026#34;, \u0026#34;cpu\u0026#34;: \u0026#34;4 vCPU\u0026#34; }, \u0026#34;PerformanceTests\u0026#34;: { \u0026#34;compute\u0026#34;: \u0026#34;BUILD_GENERAL1_LARGE\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;15GB\u0026#34;, \u0026#34;cpu\u0026#34;: \u0026#34;8 vCPU\u0026#34; } } } Cập nhật dự án AWS CodeBuild: aws codebuild update-project \\ --name dotnet-test-automation \\ --concurrent-build-limit 3 4. Cô lập Môi trường Tạo file Docker compose: # docker-compose.test.yml version: \u0026#39;3.8\u0026#39; services: unit-tests: build: context: . dockerfile: Dockerfile.tests environment: - TEST_CATEGORY=Unit volumes: - ./test-results:/test-results integration-tests: build: context: . dockerfile: Dockerfile.tests environment: - TEST_CATEGORY=Integration volumes: - ./test-results:/test-results performance-tests: build: context: . dockerfile: Dockerfile.tests environment: - TEST_CATEGORY=Performance volumes: - ./test-results:/test-results Cấu hình Giám sát Thiết lập chỉ số CloudWatch: aws cloudwatch put-metric-alarm \\ --alarm-name ParallelExecutionDuration \\ --metric-name Duration \\ --namespace AWS/CodeBuild \\ --statistic Average \\ --period 300 \\ --threshold 1800 \\ --comparison-operator GreaterThanThreshold Cấu hình ghi log: phases: build: commands: - | echo \u0026#34;Bắt đầu thực thi song song lúc $(date)\u0026#34; dotnet test | tee test-output.log echo \u0026#34;Hoàn thành thực thi song song lúc $(date)\u0026#34; Các Thực hành Tốt nhất Quản lý Tài nguyên\nPhân bổ tài nguyên dựa trên loại kiểm thử Giám sát sử dụng tài nguyên Triển khai chính sách timeout Độc lập Kiểm thử\nĐảm bảo kiểm thử có thể chạy theo bất kỳ thứ tự nào Tránh trạng thái chia sẻ Dọn dẹp dữ liệu kiểm thử Xử lý Lỗi\nCấu hình ngưỡng thất bại Triển khai logic thử lại Ghi log thông tin lỗi chi tiết Vấn đề Thường gặp và Giải pháp Hạn chế Tài nguyên\nGiám sát sử dụng bộ nhớ Điều chỉnh loại compute Triển khai phân lô kiểm thử Can thiệp Kiểm thử\nCô lập môi trường kiểm thử Sử dụng dữ liệu kiểm thử duy nhất Triển khai quy trình dọn dẹp Vấn đề Thời gian\nThêm điều kiện chờ phù hợp Triển khai cơ chế thử lại Ghi log thông tin thời gian chi tiết Bước tiếp theo Sau khi cấu hình thực thi song song, tiếp tục với Tổng hợp Kết quả để học cách kết hợp và phân tích kết quả từ các lần chạy kiểm thử song song.\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.2-buildspec-setup/",
	"title": "Thiết lập BuildSpec",
	"tags": [],
	"description": "",
	"content": "Cấu hình BuildSpec cho Kiểm thử Đơn vị Tổng quan Trong phần này, chúng ta sẽ cấu hình file buildspec.yml để tự động hóa việc thực thi kiểm thử đơn vị trong AWS CodeBuild. File buildspec sẽ định nghĩa cách thức chạy, báo cáo và tích hợp các bài kiểm thử vào pipeline CI/CD.\nCác bước Thực hiện 1. Tạo buildspec.yml Tạo hoặc cập nhật file buildspec.yml trong thư mục gốc của repository:\nversion: 0.2 phases: install: runtime-versions: dotnet: 8.0 commands: - echo Đang cài đặt các phụ thuộc kiểm thử... - dotnet tool install -g dotnet-reportgenerator-globaltool pre_build: commands: - echo Bắt đầu khôi phục vào `date` - dotnet restore build: commands: - echo Bắt đầu build vào `date` - dotnet build -c Release post_build: commands: - echo Bắt đầu kiểm thử vào `date` - dotnet test --no-build -c Release --logger \u0026#34;trx;LogFileName=testresults.trx\u0026#34; --collect:\u0026#34;XPlat Code Coverage\u0026#34; - reportgenerator -reports:\u0026#34;**/coverage.cobertura.xml\u0026#34; -targetdir:\u0026#34;coveragereport\u0026#34; -reporttypes:Html reports: dotnet-tests: file-format: VisualStudioTrx files: - \u0026#39;**/*.trx\u0026#39; base-directory: \u0026#39;$CODEBUILD_SRC_DIR\u0026#39; coverage-report: files: - \u0026#39;coveragereport/**/*\u0026#39; base-directory: \u0026#39;$CODEBUILD_SRC_DIR\u0026#39; file-format: HTML artifacts: files: - \u0026#39;**/*\u0026#39; base-directory: \u0026#39;$CODEBUILD_SRC_DIR\u0026#39; 2. Cấu hình Cài đặt Kiểm thử Thêm cài đặt kiểm thử vào dự án test của bạn:\n\u0026lt;!-- TestAutomationDemo.Tests.csproj --\u0026gt; \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;IsPackable\u0026gt;false\u0026lt;/IsPackable\u0026gt; \u0026lt;CollectCoverage\u0026gt;true\u0026lt;/CollectCoverage\u0026gt; \u0026lt;CoverletOutputFormat\u0026gt;cobertura\u0026lt;/CoverletOutputFormat\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReference Include=\u0026#34;coverlet.collector\u0026#34; Version=\u0026#34;6.0.0\u0026#34;\u0026gt; \u0026lt;IncludeAssets\u0026gt;runtime; build; native; contentfiles; analyzers\u0026lt;/IncludeAssets\u0026gt; \u0026lt;PrivateAssets\u0026gt;all\u0026lt;/PrivateAssets\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; 3. Cấu hình Ngưỡng Kiểm thử Thêm ngưỡng độ bao phủ mã:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;VSTestLogger\u0026gt;trx\u0026lt;/VSTestLogger\u0026gt; \u0026lt;VSTestResultsDirectory\u0026gt;$(MSBuildProjectDirectory)/TestResults\u0026lt;/VSTestResultsDirectory\u0026gt; \u0026lt;CoverletThreshold\u0026gt;80\u0026lt;/CoverletThreshold\u0026gt; \u0026lt;/PropertyGroup\u0026gt; 4. Thêm Bộ lọc Kiểm thử Cấu hình lọc kiểm thử trong buildspec.yml:\npost_build: commands: - dotnet test --no-build -c Release --filter \u0026#34;Category=Unit\u0026#34; --logger \u0026#34;trx;LogFileName=testresults.trx\u0026#34; Giải thích Các Thành phần BuildSpec Các Giai đoạn\ninstall: Thiết lập .NET và công cụ pre_build: Khôi phục các phụ thuộc build: Biên dịch giải pháp post_build: Chạy kiểm thử và tạo báo cáo Báo cáo\nKết quả kiểm thử định dạng TRX Độ bao phủ mã định dạng HTML Vị trí báo cáo có thể cấu hình Artifacts\nKết quả kiểm thử Báo cáo độ bao phủ Đầu ra build Cấu hình Báo cáo Kiểm thử TRX Logger --logger \u0026#34;trx;LogFileName=testresults.trx\u0026#34; Báo cáo Độ bao phủ reportgenerator -reports:\u0026#34;**/coverage.cobertura.xml\u0026#34; -targetdir:\u0026#34;coveragereport\u0026#34; -reporttypes:Html Các Thực hành Tốt nhất Cấu hình Build\nSử dụng cấu hình Release Bật build xác định Đặt thời gian chờ phù hợp Thực thi Kiểm thử\nChạy kiểm thử song song khi có thể Lọc kiểm thử phù hợp Thu thập số liệu liên quan Tạo Báo cáo\nSử dụng định dạng chuẩn (TRX, Cobertura) Tạo báo cáo dễ đọc Lưu trữ kết quả nhất quán Vấn đề Thường gặp và Giải pháp Lỗi Build\nKiểm tra tương thích phiên bản .NET Xác minh tham chiếu gói Xem xét log build Vấn đề Thực thi Kiểm thử\nTăng giá trị thời gian chờ Kiểm tra phát hiện kiểm thử Xác minh phụ thuộc kiểm thử Vấn đề Tạo Báo cáo\nKiểm tra quyền file Xác minh cài đặt công cụ Xem xét cấu hình đường dẫn Bước tiếp theo Sau khi cấu hình buildspec.yml, tiếp tục với phần Đẩy và Kích hoạt để kiểm tra thực thi tự động.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.2-github-repo/",
	"title": "Thiết lập GitHub Repository",
	"tags": [],
	"description": "",
	"content": "Thiết lập GitHub Repository Tổng quan Trong phần này, chúng ta sẽ tạo một GitHub repository cho ứng dụng .NET và thiết lập các cấu hình cần thiết để tích hợp với AWS CodeBuild.\nYêu cầu tiên quyết Tài khoản GitHub Đã cài đặt Git trên máy local Ứng dụng .NET từ phần trước Các bước thực hiện 1. Tạo GitHub Repository Truy cập GitHub Nhấn \u0026ldquo;New\u0026rdquo; để tạo repository mới Tên: dotnet-test-automation Mô tả: \u0026ldquo;AWS CodeBuild Test Automation Demo\u0026rdquo; Chọn repository \u0026ldquo;Public\u0026rdquo; Không khởi tạo với README (chúng ta sẽ đẩy code hiện có lên) 2. Khởi tạo Git Repository Local cd TestAutomationDemo git init git branch -M main 3. Tạo file .gitignore dotnet new gitignore 4. Cấu hình Repository git remote add origin https://github.com/\u0026lt;tên-người-dùng\u0026gt;/dotnet-test-automation.git 5. Commit Ban đầu git add . git commit -m \u0026#34;Initial commit: Basic .NET MVC application\u0026#34; git push -u origin main 6. Tạo Nhánh Development git checkout -b development git push -u origin development 7. Cấu hình Bảo vệ Nhánh Vào Settings \u0026gt; Branches của repository Thêm quy tắc bảo vệ nhánh cho main Yêu cầu đánh giá pull request Yêu cầu kiểm tra trạng thái phải pass Áp dụng các hạn chế cho cả quản trị viên Cấu trúc Repository dotnet-test-automation/ ├── Controllers/ ├── Models/ ├── Views/ ├── wwwroot/ ├── .gitignore ├── Program.cs ├── TestAutomationDemo.csproj └── appsettings.json Chiến lược Phân nhánh main: Code sẵn sàng cho production development: Nhánh tích hợp Nhánh tính năng: Tạo từ development Các bước Xác nhận Kiểm tra repository đã tạo trên GitHub Xác nhận tất cả file đã được đẩy lên Kiểm tra quy tắc bảo vệ nhánh Xác nhận hiệu quả của .gitignore Vấn đề Thường gặp và Giải pháp Nếu push thất bại, kiểm tra cấu hình URL remote Đối với vấn đề quyền truy cập, xác thực lại GitHub Nếu thiếu file, kiểm tra cài đặt .gitignore Bước tiếp theo Sau khi thiết lập xong GitHub repository, tiếp tục với phần Cài đặt Công cụ Cần thiết.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/",
	"title": "Thiết lập Môi trường",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Thiết lập Môi trường Module này hướng dẫn bạn thiết lập môi trường phát triển và kiểm thử cho việc tự động hóa kiểm thử với AWS CodeBuild. Chúng ta sẽ thiết lập tất cả các thành phần cần thiết để tạo một pipeline tích hợp liên tục mạnh mẽ.\nNhững gì Bạn sẽ Học Thiết lập Ứng dụng .NET\nTạo dự án .NET 8 MVC mới Cấu hình cấu trúc ứng dụng cơ bản Thêm các dependency kiểm thử ban đầu Cấu hình GitHub Repository\nTạo và khởi tạo repository Thiết lập bảo vệ nhánh Cấu hình quy trình phát triển Cài đặt Công cụ Cần thiết\nCài đặt và cấu hình AWS CLI Thiết lập công cụ phát triển Cài đặt SDK cần thiết Thiết lập Dự án CodeBuild\nTạo dự án AWS CodeBuild Cấu hình đặc tả build Thiết lập vai trò và quyền IAM Tích hợp Webhook\nCấu hình webhook GitHub Kiểm tra kích hoạt tự động Xác minh pipeline build Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nTài khoản AWS với quyền thích hợp Kiến thức cơ bản về Git và GitHub Hiểu biết về phát triển .NET Quyền truy cập quản trị vào máy phát triển của bạn Ước tính Thời gian Tổng thời gian Module: ~2 giờ Thời gian mỗi Phần: 20-30 phút Cấu trúc Module Thiết lập Ứng dụng .NET\nThiết lập ứng dụng cơ bản Cấu hình ban đầu Thiết lập GitHub Repository\nTạo repository Cấu hình nhánh Cài đặt Công cụ Cần thiết\nThiết lập môi trường phát triển Cài đặt công cụ AWS Tạo Dự án CodeBuild\nCấu hình AWS CodeBuild Thiết lập pipeline build Xác minh Webhook\nKiểm tra tích hợp Xác minh tự động hóa Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nMột ứng dụng .NET hoạt động Một GitHub repository đã được cấu hình Tất cả công cụ phát triển cần thiết đã được cài đặt Một dự án AWS CodeBuild hoạt động Kích hoạt build tự động thông qua webhook Hãy bắt đầu với Thiết lập Ứng dụng .NET!\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.2-integrate-into-ci/",
	"title": "Tích hợp vào CI/CD",
	"tags": [],
	"description": "",
	"content": "Tích hợp Kiểm thử Hiệu năng vào CI/CD Tổng quan Trong phần này, chúng ta sẽ tích hợp các kiểm thử hiệu năng vào pipeline CI/CD của AWS CodeBuild. Chúng ta sẽ cấu hình quy trình build để tự động chạy kiểm thử hiệu năng và đánh giá kết quả.\nCác bước Thực hiện 1. Cập nhật Cấu hình BuildSpec Tạo buildspec kiểm thử hiệu năng: # performance-buildspec.yml version: 0.2 phases: install: runtime-versions: nodejs: 18 commands: - curl https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz -L | tar xvz --strip-components=1 - mv k6 /usr/local/bin pre_build: commands: - echo Bắt đầu kiểm thử hiệu năng lúc $(date) - mkdir -p performance-results build: commands: - k6 run basic-load-test.js --out json=performance-results/load-test.json - k6 run stress-test.js --out json=performance-results/stress-test.json - k6 run collect-metrics.js --out json=performance-results/metrics.json post_build: commands: - echo Hoàn thành kiểm thử hiệu năng lúc $(date) - node generate-performance-report.js reports: performance-reports: files: - performance-results/*.json file-format: JSON artifacts: files: - performance-results/**/* - performance-report.html name: performance-test-results-$(date +%Y-%m-%d) 2. Tạo Job Kiểm thử Hiệu năng Cấu hình dự án CodeBuild: aws codebuild create-project \\ --name performance-test-project \\ --source type=GITHUB,location=https://github.com/\u0026lt;username\u0026gt;/dotnet-test-automation.git \\ --artifacts type=S3,location=performance-test-results \\ --environment type=LINUX_CONTAINER,image=aws/codebuild/standard:7.0,computeType=BUILD_GENERAL1_LARGE \\ --service-role PerformanceTestRole Tạo vai trò IAM: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;cloudwatch:PutMetricData\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } 3. Cấu hình Ngưỡng Hiệu năng Tạo cấu hình ngưỡng: // performance-thresholds.js module.exports = { loadTest: { responseTime: { p95: 500, // Thời gian phản hồi phân vị 95 tính bằng ms p99: 1000 // Thời gian phản hồi phân vị 99 tính bằng ms }, errorRate: 0.01, // Ngưỡng tỷ lệ lỗi 1% throughput: 100 // Tối thiểu yêu cầu mỗi giây }, stressTest: { responseTime: { p95: 1000, p99: 2000 }, errorRate: 0.02, throughput: 200 } }; Tạo script đánh giá: // evaluate-performance.js const thresholds = require(\u0026#39;./performance-thresholds\u0026#39;); function evaluateResults(results) { const violations = []; if (results.metrics.http_req_duration.p95 \u0026gt; thresholds.loadTest.responseTime.p95) { violations.push(`Thời gian phản hồi P95 vượt ngưỡng: ${results.metrics.http_req_duration.p95}ms`); } if (results.metrics.error_rate \u0026gt; thresholds.loadTest.errorRate) { violations.push(`Tỷ lệ lỗi vượt ngưỡng: ${results.metrics.error_rate * 100}%`); } return violations; } module.exports = { evaluateResults }; 4. Thiết lập Giám sát Tạo bảng điều khiển CloudWatch: aws cloudwatch create-dashboard \\ --dashboard-name PerformanceTests \\ --dashboard-body file://performance-dashboard.json Cấu hình chỉ số: { \u0026#34;metrics\u0026#34;: [ [ \u0026#34;CustomMetrics\u0026#34;, \u0026#34;ThoiGianPhanHoi\u0026#34;, \u0026#34;LoaiTest\u0026#34;, \u0026#34;Tai\u0026#34;, { \u0026#34;stat\u0026#34;: \u0026#34;p95\u0026#34; } ], [ \u0026#34;.\u0026#34;, \u0026#34;TyLeLoi\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34;, { \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34; } ], [ \u0026#34;.\u0026#34;, \u0026#34;ThongLuong\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34;, { \u0026#34;stat\u0026#34;: \u0026#34;Sum\u0026#34; } ] ], \u0026#34;view\u0026#34;: \u0026#34;timeSeries\u0026#34;, \u0026#34;stacked\u0026#34;: false, \u0026#34;period\u0026#34;: 300 } Các Thực hành Tốt nhất Quản lý Tài nguyên\nSử dụng loại compute phù hợp Giám sát sử dụng tài nguyên Dọn dẹp dữ liệu kiểm thử Triển khai thời gian chờ Lập lịch Kiểm thử\nChạy vào thời điểm nhất quán Tránh giờ cao điểm Xem xét múi giờ Đặt cửa sổ thực thi Xử lý Kết quả\nLưu trữ kết quả lịch sử Theo dõi xu hướng Đặt ngưỡng cảnh báo Ghi chép bất thường Vấn đề Thường gặp và Giải pháp Hạn chế Tài nguyên\nMở rộng dung lượng compute Tối ưu hóa script kiểm thử Thực thi kiểm thử theo lô Giám sát sử dụng bộ nhớ Vấn đề Mạng\nCấu hình thời gian chờ Xử lý thử lại Ghi log lỗi kết nối Giám sát băng thông Quản lý Dữ liệu\nDọn dẹp dữ liệu kiểm thử Quản lý lưu trữ Lưu trữ kết quả Triển khai chính sách lưu giữ Bước tiếp theo Sau khi tích hợp kiểm thử hiệu năng vào CI/CD, tiếp tục với Xuất Kết quả để học cách thu thập và phân tích kết quả kiểm thử.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.3-install-tools/",
	"title": "Cài đặt Công cụ Cần thiết",
	"tags": [],
	"description": "",
	"content": "Cài đặt Công cụ Cần thiết Tổng quan Trong phần này, chúng ta sẽ cài đặt và cấu hình tất cả các công cụ cần thiết cho dự án tự động hóa AWS CodeBuild.\nDanh sách Công cụ Cần thiết 1. AWS CLI AWS Command Line Interface là công cụ thiết yếu để tương tác với các dịch vụ AWS.\n# Cho Linux curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install # Cho Windows # Tải AWS CLI MSI installer từ: https://awscli.amazonaws.com/AWSCLIV2.msi # Kiểm tra cài đặt aws --version 2. AWS SAM CLI AWS Serverless Application Model (SAM) CLI giúp kiểm thử local.\n# Cho Linux wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip unzip aws-sam-cli-linux-x86_64.zip -d sam-installation sudo ./sam-installation/install # Cho Windows # Tải SAM CLI MSI installer từ trang web AWS # Kiểm tra cài đặt sam --version 3. Cấu hình AWS Credentials Thiết lập thông tin xác thực AWS cho CLI:\naws configure # Nhập các thông tin: # - AWS Access Key ID # - AWS Secret Access Key # - Default region (ví dụ: us-east-1) # - Default output format (json) 4. Công cụ Phát triển Visual Studio Code Tải từ https://code.visualstudio.com/ Cài đặt các extension được khuyến nghị: C# Dev Kit AWS Toolkit GitHub Pull Requests GitLens Cấu hình Git git config --global user.name \u0026#34;Tên của bạn\u0026#34; git config --global user.email \u0026#34;email.cua.ban@example.com\u0026#34; Các bước Xác nhận Kiểm tra Cấu hình AWS CLI: aws sts get-caller-identity Xác nhận AWS SAM: sam --version Kiểm tra Cấu hình Git: git config --list Biến Môi trường Thiết lập các biến môi trường cần thiết:\n# Linux/macOS export AWS_REGION=us-east-1 export PROJECT_NAME=dotnet-test-automation # Windows PowerShell $env:AWS_REGION=\u0026#34;us-east-1\u0026#34; $env:PROJECT_NAME=\u0026#34;dotnet-test-automation\u0026#34; Vấn đề Thường gặp và Giải pháp Vấn đề AWS CLI Nếu lệnh AWS CLI thất bại, kiểm tra thông tin xác thực trong ~/.aws/credentials Đối với lỗi quyền truy cập, xác minh quyền của người dùng IAM Không khớp region: đảm bảo region mặc định được đặt chính xác Vấn đề Visual Studio Code Nếu IntelliSense không hoạt động, thử tải lại cửa sổ Đối với vấn đề extension, thử gỡ cài đặt và cài đặt lại Vấn đề Git Vấn đề SSH key: xác minh SSH key đã được thêm vào GitHub Vấn đề xác thực: sử dụng GitHub CLI hoặc Personal Access Token Các Thực hành Bảo mật Tốt nhất Không bao giờ commit thông tin xác thực AWS vào Git Sử dụng IAM role với quyền tối thiểu cần thiết Thường xuyên thay đổi access key Bật MFA cho tài khoản AWS và GitHub Bước tiếp theo Sau khi tất cả công cụ đã được cài đặt và cấu hình, tiếp tục với phần Thiết lập Dự án CodeBuild.\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.3-push-trigger/",
	"title": "Đẩy và Kích hoạt",
	"tags": [],
	"description": "",
	"content": "Đẩy Thay đổi và Kích hoạt Kiểm thử Tổng quan Trong phần này, chúng ta sẽ học cách đẩy các thay đổi lên GitHub và kích hoạt kiểm thử tự động trong AWS CodeBuild. Chúng ta sẽ khám phá các phương thức kích hoạt khác nhau và xác minh rằng pipeline CI/CD thực thi kiểm thử tự động.\nCác bước Thực hiện 1. Chuẩn bị Thay đổi Đảm bảo tất cả file đã sẵn sàng: git status Stage các thay đổi: git add . git status Commit thay đổi với thông điệp commit theo quy ước: git commit -m \u0026#34;test: cấu hình kiểm thử đơn vị tự động\u0026#34; 2. Đẩy lên Các Nhánh Khác nhau Đẩy lên nhánh development: git checkout development git push origin development Tạo và đẩy nhánh tính năng: git checkout -b feature/unit-tests git push -u origin feature/unit-tests Tạo Pull Request: gh pr create \\ --title \u0026#34;Thêm kiểm thử đơn vị tự động\u0026#34; \\ --body \u0026#34;Triển khai kiểm thử đơn vị tự động với AWS CodeBuild\u0026#34; \\ --base development 3. Theo dõi Kích hoạt Build Kiểm tra trạng thái build sử dụng AWS CLI: aws codebuild list-builds-for-project \\ --project-name dotnet-test-automation \\ --sort-order DESCENDING \\ --max-items 5 Lấy thông tin build chi tiết: aws codebuild batch-get-builds \\ --ids \u0026lt;build-id\u0026gt; 4. Cấu hình Chính sách Nhánh Nhánh được Bảo vệ:\nYêu cầu kiểm tra trạng thái phải pass Yêu cầu nhánh phải cập nhật Bao gồm quản trị viên trong các hạn chế Quy tắc Bảo vệ Nhánh:\n{ \u0026#34;required_status_checks\u0026#34;: { \u0026#34;strict\u0026#34;: true, \u0026#34;contexts\u0026#34;: [ \u0026#34;AWS CodeBuild dotnet-test-automation\u0026#34; ] }, \u0026#34;enforce_admins\u0026#34;: true } Các Loại Kích hoạt Kích hoạt Push\nPush trực tiếp vào nhánh Tự động bắt đầu build Bộ lọc nhánh có thể cấu hình Kích hoạt Pull Request\nTạo PR mới Cập nhật PR Gửi đánh giá Kích hoạt Thủ công\naws codebuild start-build \\ --project-name dotnet-test-automation \\ --source-version \u0026lt;commit-id\u0026gt; Các Thực hành Tốt nhất Quản lý Nhánh\nSử dụng nhánh tính năng Giữ nhánh ngắn hạn Đồng bộ hóa thường xuyên với nhánh chính Chiến lược Commit\nThông điệp commit rõ ràng Commit nguyên tử Commit nhỏ thường xuyên Tích hợp CI/CD\nVòng phản hồi nhanh Kiểm tra trạng thái tự động Chỉ báo trạng thái build rõ ràng Giám sát và Ghi Log Log Build aws codebuild get-build-logs \\ --id \u0026lt;build-id\u0026gt; Tích hợp CloudWatch aws logs get-log-events \\ --log-group-name /aws/codebuild/dotnet-test-automation \\ --log-stream-name \u0026lt;build-id\u0026gt; Hướng dẫn Xử lý Sự cố Kích hoạt Thất bại\nKiểm tra cấu hình webhook Xác minh quyền GitHub Xem xét chính sách nhánh Build Thất bại\nKiểm tra log build Kiểm tra giới hạn tài nguyên Xác minh biến môi trường Vấn đề Thường gặp\nVấn đề timeout Giới hạn tài nguyên Vấn đề quyền truy cập Bước tiếp theo Sau khi kích hoạt thành công các kiểm thử của bạn, tiếp tục với phần Xem Kết quả để học cách phân tích kết quả kiểm thử và báo cáo độ bao phủ.\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/",
	"title": "Kiểm thử Đơn vị Tự động",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Kiểm thử Đơn vị Tự động Module này tập trung vào việc triển khai kiểm thử đơn vị tự động trong pipeline CI/CD sử dụng AWS CodeBuild. Bạn sẽ học cách viết các bài kiểm thử đơn vị hiệu quả, cấu hình tự động hóa kiểm thử và tích hợp kết quả kiểm thử vào quy trình phát triển.\nNhững gì Bạn sẽ Học Viết Kiểm thử Đơn vị\nTạo dự án kiểm thử Viết các ca kiểm thử hiệu quả Triển khai các mẫu kiểm thử Sử dụng framework xUnit Cấu hình BuildSpec\nCấu hình thực thi kiểm thử Thiết lập báo cáo kiểm thử Quản lý các phụ thuộc kiểm thử Đẩy và Kích hoạt Kiểm thử\nTự động hóa thực thi kiểm thử Cấu hình kích hoạt build Quản lý quy trình kiểm thử Xem Kết quả Kiểm thử\nPhân tích báo cáo kiểm thử Diễn giải số liệu kiểm thử Theo dõi độ bao phủ kiểm thử Sửa Lỗi Kiểm thử\nGỡ lỗi các kiểm thử thất bại Triển khai sửa chữa Xác nhận các sửa đổi Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 2 (Thiết lập Môi trường) Hiểu biết về kiểm thử C# và .NET Quen thuộc với framework xUnit Quyền truy cập dự án AWS CodeBuild Ước tính Thời gian Tổng thời gian Module: ~2.5 giờ Thời gian mỗi Phần: 30 phút Cấu trúc Module Viết Kiểm thử Đơn vị\nThiết lập dự án kiểm thử Triển khai ca kiểm thử Thiết lập BuildSpec\nCấu hình build Thiết lập tự động hóa kiểm thử Đẩy và Kích hoạt\nThực thi tự động Tích hợp pipeline Xem Kết quả\nPhân tích kết quả Diễn giải báo cáo Sửa Lỗi\nXử lý sự cố Sửa chữa triển khai Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nMột bộ kiểm thử đơn vị toàn diện Thực thi kiểm thử tự động trong CI/CD Báo cáo và phân tích kết quả kiểm thử Kinh nghiệm sửa lỗi kiểm thử Quy trình chất lượng mã nguồn được cải thiện Hãy bắt đầu với Viết Kiểm thử Đơn vị!\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.3-aggregate-results/",
	"title": "Tổng hợp Kết quả",
	"tags": [],
	"description": "",
	"content": "Tổng hợp Kết quả Kiểm thử Song song Tổng quan Trong phần này, chúng ta sẽ học cách thu thập, kết hợp và phân tích kết quả kiểm thử từ các lần thực thi song song. Chúng ta sẽ tạo một hệ thống báo cáo toàn diện tổng hợp kết quả từ các danh mục kiểm thử khác nhau và trình bày chúng một cách có ý nghĩa.\nCác bước Thực hiện 1. Tạo Script Tổng hợp Kết quả Tạo script tổng hợp PowerShell: # aggregate-results.ps1 param( [string]$ResultsPath = \u0026#34;test-results\u0026#34; ) $totalTests = 0 $passedTests = 0 $failedTests = 0 $skippedTests = 0 Get-ChildItem -Path $ResultsPath -Filter \u0026#34;*.trx\u0026#34; | ForEach-Object { $xml = [xml](Get-Content $_.FullName) $counters = $xml.TestRun.ResultSummary.Counters $totalTests += [int]$counters.total $passedTests += [int]$counters.passed $failedTests += [int]$counters.failed $skippedTests += [int]$counters.skipped } $results = @{ Total = $totalTests Passed = $passedTests Failed = $failedTests Skipped = $skippedTests PassRate = [math]::Round(($passedTests / $totalTests) * 100, 2) } ConvertTo-Json $results \u0026gt; \u0026#34;test-results/summary.json\u0026#34; 2. Cấu hình Thu thập Kết quả Cập nhật buildspec.yml cho thu thập kết quả: version: 0.2 phases: post_build: commands: - mkdir -p combined-results - cp */test-results/*.trx combined-results/ - pwsh ./aggregate-results.ps1 -ResultsPath combined-results reports: test-reports: files: - \u0026#34;**/*.trx\u0026#34; file-format: VisualStudioTrx base-directory: combined-results artifacts: files: - combined-results/**/* - combined-results/summary.json name: test-results-$(date +%Y-%m-%d) 3. Tạo Trình Tạo Báo cáo HTML Tạo mẫu báo cáo: \u0026lt;!-- report-template.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tổng kết Thực thi Kiểm thử\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .summary { margin: 20px; } .passed { color: green; } .failed { color: red; } .chart { width: 600px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;summary\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Tổng kết Thực thi Kiểm thử\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Tổng số Kiểm thử: {{totalTests}}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;passed\u0026#34;\u0026gt;Đã Pass: {{passedTests}}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;failed\u0026#34;\u0026gt;Thất bại: {{failedTests}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Tỷ lệ Pass: {{passRate}}%\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chart\u0026#34;\u0026gt; \u0026lt;canvas id=\u0026#34;resultsChart\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tạo script tạo báo cáo: # generate-report.py import json import jinja2 import matplotlib.pyplot as plt def generate_report(summary_file, template_file, output_file): with open(summary_file) as f: data = json.load(f) # Tạo biểu đồ tròn plt.figure(figsize=(8, 8)) plt.pie([data[\u0026#39;Passed\u0026#39;], data[\u0026#39;Failed\u0026#39;], data[\u0026#39;Skipped\u0026#39;]], labels=[\u0026#39;Đã Pass\u0026#39;, \u0026#39;Thất bại\u0026#39;, \u0026#39;Bỏ qua\u0026#39;], colors=[\u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;, \u0026#39;gray\u0026#39;]) plt.savefig(\u0026#39;test-results/chart.png\u0026#39;) # Tạo báo cáo HTML with open(template_file) as f: template = jinja2.Template(f.read()) html = template.render( totalTests=data[\u0026#39;Total\u0026#39;], passedTests=data[\u0026#39;Passed\u0026#39;], failedTests=data[\u0026#39;Failed\u0026#39;], passRate=data[\u0026#39;PassRate\u0026#39;] ) with open(output_file, \u0026#39;w\u0026#39;) as f: f.write(html) 4. Tải Kết quả lên S3 Tạo script tải lên: #!/bin/bash # upload-results.sh BUCKET_NAME=\u0026#34;test-results-bucket\u0026#34; DATE=$(date +%Y-%m-%d) # Tải lên kết quả kiểm thử aws s3 cp combined-results s3://$BUCKET_NAME/$DATE/ --recursive # Tải lên báo cáo tổng kết aws s3 cp test-results/report.html \\ s3://$BUCKET_NAME/$DATE/report.html \\ --content-type \u0026#34;text/html\u0026#34; Phân tích Kết quả Tạo script phân tích: # analyze-results.py import pandas as pd import numpy as np def analyze_test_results(results_dir): # Đọc tất cả file TRX dfs = [] for trx_file in glob.glob(f\u0026#34;{results_dir}/*.trx\u0026#34;): df = pd.read_xml(trx_file) dfs.append(df) # Kết hợp kết quả combined_df = pd.concat(dfs) # Tính toán thống kê stats = { \u0026#39;total_duration\u0026#39;: combined_df[\u0026#39;duration\u0026#39;].sum(), \u0026#39;avg_duration\u0026#39;: combined_df[\u0026#39;duration\u0026#39;].mean(), \u0026#39;success_rate\u0026#39;: (combined_df[\u0026#39;outcome\u0026#39;] == \u0026#39;Passed\u0026#39;).mean() * 100, \u0026#39;failure_patterns\u0026#39;: combined_df[combined_df[\u0026#39;outcome\u0026#39;] == \u0026#39;Failed\u0026#39;][\u0026#39;message\u0026#39;].value_counts() } return stats Các Thực hành Tốt nhất Lưu trữ Kết quả\nSử dụng quy ước đặt tên nhất quán Triển khai chính sách lưu giữ Sao lưu kết quả quan trọng Tạo Báo cáo\nBao gồm các chỉ số liên quan Tạo biểu diễn trực quan Cung cấp thông tin lỗi chi tiết Phân tích Dữ liệu\nTheo dõi xu hướng theo thời gian Xác định mẫu lỗi phổ biến Giám sát chỉ số hiệu năng Bước tiếp theo Sau khi triển khai tổng hợp kết quả, tiếp tục với So sánh Tốc độ để phân tích cải thiện hiệu năng từ thực thi song song.\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.3-export-results/",
	"title": "Xuất Kết quả",
	"tags": [],
	"description": "",
	"content": "Xuất Kết quả Kiểm thử Hiệu năng Tổng quan Trong phần này, chúng ta sẽ triển khai các cơ chế để xuất và lưu trữ kết quả kiểm thử hiệu năng. Chúng ta sẽ tạo một hệ thống thu thập dữ liệu toàn diện để ghi lại các chỉ số kiểm thử, tạo báo cáo và lưu trữ dữ liệu lịch sử để phân tích xu hướng.\nCác bước Thực hiện 1. Cấu hình Xuất Kết quả Tạo script xuất kết quả: // export-results.js const fs = require(\u0026#39;fs\u0026#39;); const AWS = require(\u0026#39;aws-sdk\u0026#39;); const cloudwatch = new AWS.CloudWatch(); const s3 = new AWS.S3(); async function exportResults(testResults, options) { const timestamp = new Date().toISOString(); const metrics = []; // Định dạng chỉ số cho CloudWatch Object.entries(testResults.metrics).forEach(([key, value]) =\u0026gt; { metrics.push({ MetricName: key, Value: value, Unit: \u0026#39;None\u0026#39;, Timestamp: timestamp, Dimensions: [ { Name: \u0026#39;LoaiTest\u0026#39;, Value: options.testType } ] }); }); // Gửi chỉ số đến CloudWatch await cloudwatch.putMetricData({ Namespace: \u0026#39;KiemThuHieuNang\u0026#39;, MetricData: metrics }).promise(); // Lưu kết quả chi tiết vào S3 await s3.putObject({ Bucket: options.resultsBucket, Key: `${options.testType}/${timestamp}.json`, Body: JSON.stringify(testResults), ContentType: \u0026#39;application/json\u0026#39; }).promise(); } module.exports = { exportResults }; 2. Tạo Cơ sở dữ liệu Kết quả Tạo bảng DynamoDB: aws dynamodb create-table \\ --table-name KetQuaKiemThuHieuNang \\ --attribute-definitions \\ AttributeName=TestId,AttributeType=S \\ AttributeName=Timestamp,AttributeType=S \\ --key-schema \\ AttributeName=TestId,KeyType=HASH \\ AttributeName=Timestamp,KeyType=RANGE \\ --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 Tạo script lưu trữ cơ sở dữ liệu: // store-results.js const AWS = require(\u0026#39;aws-sdk\u0026#39;); const dynamodb = new AWS.DynamoDB.DocumentClient(); async function storeResults(testResults) { const params = { TableName: \u0026#39;KetQuaKiemThuHieuNang\u0026#39;, Item: { TestId: testResults.testId, Timestamp: new Date().toISOString(), LoaiTest: testResults.testType, ThoiGian: testResults.duration, ChiSo: { ThoiGianPhanHoi: testResults.metrics.http_req_duration, TyLeLoi: testResults.metrics.http_req_failed, ThongLuong: testResults.metrics.http_reqs }, MoiTruong: testResults.env, TrangThai: testResults.status } }; await dynamodb.put(params).promise(); } 3. Tạo Báo cáo Tạo mẫu báo cáo HTML: \u0026lt;!-- report-template.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Báo cáo Kiểm thử Hiệu năng\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .metrics-table { width: 100%; border-collapse: collapse; } .metrics-table th, .metrics-table td { padding: 8px; border: 1px solid #ddd; } .chart-container { width: 800px; height: 400px; margin: 20px 0; } .threshold-violation { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Báo cáo Kiểm thử Hiệu năng\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;summary\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Tổng quan Kiểm thử\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;ID Kiểm thử: {{testId}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Thời gian: {{duration}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Trạng thái: {{status}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metrics\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Chỉ số Chính\u0026lt;/h2\u0026gt; \u0026lt;table class=\u0026#34;metrics-table\u0026#34;\u0026gt; \u0026lt;!-- Dữ liệu chỉ số sẽ được chèn vào đây --\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;charts\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Biểu đồ Hiệu năng\u0026lt;/h2\u0026gt; \u0026lt;!-- Biểu đồ sẽ được chèn vào đây --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tạo script tạo báo cáo: // generate-report.js const fs = require(\u0026#39;fs\u0026#39;); const Handlebars = require(\u0026#39;handlebars\u0026#39;); const Chart = require(\u0026#39;chart.js\u0026#39;); async function generateReport(testResults, templatePath, outputPath) { // Đọc mẫu const template = Handlebars.compile( fs.readFileSync(templatePath, \u0026#39;utf-8\u0026#39;) ); // Tạo biểu đồ const charts = await generateCharts(testResults); // Tạo dữ liệu báo cáo const reportData = { testId: testResults.testId, duration: testResults.duration, status: testResults.status, metrics: testResults.metrics, charts: charts }; // Tạo HTML const html = template(reportData); fs.writeFileSync(outputPath, html); } 4. Thiết lập Lưu giữ Dữ liệu Tạo chính sách vòng đời: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;ID\u0026#34;: \u0026#34;LuuGiuKetQuaKiemThu\u0026#34;, \u0026#34;Status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;Filter\u0026#34;: { \u0026#34;Prefix\u0026#34;: \u0026#34;ket-qua-hieu-nang/\u0026#34; }, \u0026#34;Transitions\u0026#34;: [ { \u0026#34;Days\u0026#34;: 30, \u0026#34;StorageClass\u0026#34;: \u0026#34;STANDARD_IA\u0026#34; }, { \u0026#34;Days\u0026#34;: 90, \u0026#34;StorageClass\u0026#34;: \u0026#34;GLACIER\u0026#34; } ], \u0026#34;Expiration\u0026#34;: { \u0026#34;Days\u0026#34;: 365 } } ] } Các Thực hành Tốt nhất Tổ chức Dữ liệu\nSử dụng đặt tên nhất quán Triển khai quản lý phiên bản Cấu trúc dữ liệu theo cấp bậc Tài liệu hóa định dạng dữ liệu Quản lý Lưu trữ\nTriển khai chính sách lưu giữ Giám sát sử dụng lưu trữ Lưu trữ dữ liệu cũ Sao lưu kết quả quan trọng Tạo Báo cáo\nBao gồm chỉ số chính Thêm trực quan hóa Làm nổi bật bất thường Cung cấp ngữ cảnh Bước tiếp theo Sau khi thiết lập xuất và lưu trữ kết quả, tiếp tục với Phân tích Hiệu năng để học cách phân tích và diễn giải dữ liệu đã thu thập.\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.4-compare-speed/",
	"title": "So sánh Tốc độ",
	"tags": [],
	"description": "",
	"content": "So sánh Tốc độ Thực thi Tổng quan Trong phần này, chúng ta sẽ phân tích và so sánh tốc độ thực thi giữa các lần chạy kiểm thử tuần tự và song song. Chúng ta sẽ đo lường cải thiện hiệu năng, xác định điểm nghẽn và tối ưu hóa thực thi kiểm thử để đạt hiệu quả tối đa.\nCác bước Thực hiện 1. Tạo Công cụ Đo lường Hiệu năng Tạo script đo thời gian: # measure-execution.ps1 param( [string]$TestMode = \u0026#34;sequential\u0026#34; ) $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() if ($TestMode -eq \u0026#34;sequential\u0026#34;) { # Chạy kiểm thử tuần tự Get-ChildItem -Filter \u0026#34;*.Tests.*\u0026#34; | ForEach-Object { dotnet test $_.FullName } } else { # Chạy kiểm thử song song $jobs = Get-ChildItem -Filter \u0026#34;*.Tests.*\u0026#34; | ForEach-Object { Start-Job -ScriptBlock { param($path) dotnet test $path } -ArgumentList $_.FullName } Wait-Job $jobs Receive-Job $jobs } $stopwatch.Stop() $executionTime = $stopwatch.Elapsed return @{ Mode = $TestMode Duration = $executionTime TimeInSeconds = $executionTime.TotalSeconds } 2. Triển khai So sánh Hiệu năng Tạo script so sánh: # compare-performance.py import matplotlib.pyplot as plt import pandas as pd def analyze_performance(sequential_results, parallel_results): # Tính toán cải thiện speedup = sequential_results[\u0026#39;duration\u0026#39;] / parallel_results[\u0026#39;duration\u0026#39;] efficiency = speedup / parallel_results[\u0026#39;worker_count\u0026#39;] # Tạo biểu đồ so sánh labels = [\u0026#39;Tuần tự\u0026#39;, \u0026#39;Song song\u0026#39;] durations = [sequential_results[\u0026#39;duration\u0026#39;], parallel_results[\u0026#39;duration\u0026#39;]] plt.figure(figsize=(10, 6)) plt.bar(labels, durations) plt.title(\u0026#39;So sánh Thời gian Thực thi Kiểm thử\u0026#39;) plt.ylabel(\u0026#39;Thời gian (giây)\u0026#39;) # Thêm chú thích cải thiện plt.annotate(f\u0026#39;Tăng tốc: {speedup:.2f}x\\nHiệu quả: {efficiency:.2%}\u0026#39;, xy=(1, parallel_results[\u0026#39;duration\u0026#39;]), xytext=(1.2, parallel_results[\u0026#39;duration\u0026#39;] * 1.2), arrowprops=dict(facecolor=\u0026#39;black\u0026#39;, shrink=0.05)) plt.savefig(\u0026#39;performance-comparison.png\u0026#39;) return { \u0026#39;speedup\u0026#39;: speedup, \u0026#39;efficiency\u0026#39;: efficiency, \u0026#39;time_saved\u0026#39;: sequential_results[\u0026#39;duration\u0026#39;] - parallel_results[\u0026#39;duration\u0026#39;] } 3. Giám sát Sử dụng Tài nguyên Tạo script giám sát tài nguyên: #!/bin/bash # monitor-resources.sh log_resources() { timestamp=$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) cpu_usage=$(top -bn1 | grep \u0026#34;Cpu(s)\u0026#34; | awk \u0026#39;{print $2}\u0026#39;) memory_usage=$(free -m | awk \u0026#39;NR==2{printf \u0026#34;%.2f%%\u0026#34;, $3*100/$2}\u0026#39;) echo \u0026#34;$timestamp,$cpu_usage,$memory_usage\u0026#34; \u0026gt;\u0026gt; resource-usage.csv } # Giám sát mỗi 5 giây while true; do log_resources sleep 5 done 4. Tạo Báo cáo Hiệu năng Tạo mẫu báo cáo: \u0026lt;!-- performance-report-template.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Báo cáo So sánh Hiệu năng\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .metrics { margin: 20px; } .improvement { color: green; } .chart { width: 800px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;metrics\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Chỉ số Hiệu năng\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Thực thi Tuần tự: {{sequential_time}} giây\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Thực thi Song song: {{parallel_time}} giây\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;improvement\u0026#34;\u0026gt;Cải thiện Tốc độ: {{speedup}}x\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Hiệu quả Tài nguyên: {{efficiency}}%\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chart\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;performance-comparison.png\u0026#34; alt=\u0026#34;Biểu đồ Hiệu năng\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Phân tích Hiệu năng Chỉ số Chính cần Giám sát:\nTổng thời gian thực thi Sử dụng CPU Sử dụng bộ nhớ Thao tác I/O Băng thông mạng Xác định Điểm nghẽn:\nThời gian khởi tạo kiểm thử Tranh chấp tài nguyên Thao tác cơ sở dữ liệu Thao tác hệ thống tệp Cơ hội Tối ưu hóa:\nChiến lược nhóm kiểm thử Phân bổ tài nguyên Sử dụng bộ nhớ đệm Hiệu quả dọn dẹp dữ liệu Các Thực hành Tốt nhất Đo lường Hiệu năng\nSử dụng dữ liệu kiểm thử nhất quán Chạy nhiều lần lặp Tính đến thời gian khởi động Xem xét yếu tố môi trường Quản lý Tài nguyên\nGiám sát tài nguyên hệ thống Tối ưu hóa phân bổ tài nguyên Xử lý dọn dẹp tài nguyên Ngăn chặn rò rỉ tài nguyên Báo cáo\nBao gồm tất cả chỉ số liên quan Trực quan hóa so sánh Ghi chép bất thường Theo dõi xu hướng theo thời gian Vấn đề Thường gặp và Giải pháp Điểm nghẽn Tài nguyên\nTriển khai pool tài nguyên Tối ưu hóa dữ liệu kiểm thử Sử dụng kích thước compute phù hợp Giám sát giới hạn tài nguyên Phụ thuộc Kiểm thử\nGiảm thiểu tài nguyên chia sẻ Triển khai cô lập phù hợp Xử lý dọn dẹp hiệu quả Quản lý thứ tự kiểm thử Suy giảm Hiệu năng\nGiám sát thường xuyên Phân tích xu hướng Tối ưu hóa chủ động Mở rộng tài nguyên Bước tiếp theo Sau khi so sánh và tối ưu hóa tốc độ thực thi kiểm thử, tiếp tục với Kiểm thử Hiệu năng để triển khai các kiểm thử hiệu năng chuyên dụng.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.4-codebuild-project/",
	"title": "Thiết lập Dự án CodeBuild",
	"tags": [],
	"description": "",
	"content": "Thiết lập Dự án AWS CodeBuild Tổng quan Trong phần này, chúng ta sẽ tạo và cấu hình một dự án AWS CodeBuild để tự động hóa quá trình kiểm thử. CodeBuild sẽ chịu trách nhiệm build ứng dụng .NET và chạy các bài kiểm thử tự động.\nYêu cầu tiên quyết AWS CLI đã được cấu hình với quyền thích hợp GitHub repository đã được thiết lập từ các bước trước Hiểu biết cơ bản về cấu hình YAML Các bước thực hiện 1. Tạo IAM Role cho CodeBuild Tạo role mà CodeBuild sẽ sử dụng để truy cập các dịch vụ AWS:\naws iam create-role --role-name CodeBuildServiceRole --assume-role-policy-document \u0026#39;{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;codebuild.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] }\u0026#39; Gắn các policy cần thiết:\naws iam attach-role-policy --role-name CodeBuildServiceRole \\ --policy-arn arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess aws iam attach-role-policy --role-name CodeBuildServiceRole \\ --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess 2. Tạo buildspec.yml Tạo file buildspec.yml trong thư mục gốc của repository:\nversion: 0.2 phases: install: runtime-versions: dotnet: 8.0 pre_build: commands: - echo Restore started on `date` - dotnet restore build: commands: - echo Build started on `date` - dotnet build -c Release post_build: commands: - echo Test started on `date` - dotnet test --no-build -c Release --logger \u0026#34;trx;LogFileName=testresults.trx\u0026#34; reports: dotnet-tests: file-format: VisualStudioTrx files: - \u0026#39;**/*.trx\u0026#39; base-directory: \u0026#39;$CODEBUILD_SRC_DIR\u0026#39; artifacts: files: - \u0026#39;**/*\u0026#39; base-directory: \u0026#39;bin/Release/net8.0/publish\u0026#39; 3. Tạo Dự án CodeBuild Sử dụng AWS CLI:\naws codebuild create-project \\ --name dotnet-test-automation \\ --source type=GITHUB,location=https://github.com/\u0026lt;username\u0026gt;/dotnet-test-automation.git \\ --source-version main \\ --artifacts type=NO_ARTIFACTS \\ --environment type=LINUX_CONTAINER,image=aws/codebuild/amazonlinux2-x86_64-standard:4.0,computeType=BUILD_GENERAL1_SMALL \\ --service-role CodeBuildServiceRole 4. Cấu hình Kết nối GitHub Truy cập AWS CodeBuild Console Chọn dự án của bạn Chỉnh sửa Source Kết nối với GitHub sử dụng OAuth Xác nhận quyền truy cập repository 5. Cấu hình Trigger Build Thiết lập build tự động:\nVào Build triggers Bật webhook Cấu hình các sự kiện: PUSH PULL_REQUEST_CREATED PULL_REQUEST_UPDATED Thiết lập Biến Môi trường Cấu hình trong phần cài đặt dự án CodeBuild:\nDOTNET_ENVIRONMENT: Production ASPNETCORE_ENVIRONMENT: Production TEST_CONFIGURATION: Release Giám sát và Logs Xem build logs: aws codebuild batch-get-builds --ids \u0026lt;build-id\u0026gt; CloudWatch Logs: Điều hướng đến console CloudWatch Kiểm tra Log groups: /aws/codebuild/dotnet-test-automation Cân nhắc Bảo mật Quyền IAM Role\nSử dụng nguyên tắc quyền tối thiểu Thường xuyên xem xét quyền Loại bỏ quyền không sử dụng Biến Môi trường\nSử dụng AWS Secrets Manager cho dữ liệu nhạy cảm Không lưu trữ thông tin xác thực trong buildspec.yml Mã hóa các biến môi trường nhạy cảm Vấn đề Thường gặp và Giải pháp Lỗi Build\nKiểm tra cú pháp buildspec.yml Xác minh tương thích phiên bản .NET Xem xét quyền IAM Vấn đề Kết nối GitHub\nLàm mới token OAuth Kiểm tra quyền repository Xác minh cấu hình webhook Vấn đề Thực thi Kiểm thử\nKiểm tra cấu hình framework kiểm thử Xác minh việc tìm kiếm test Xem xét cài đặt ghi log test Bước tiếp theo Sau khi thiết lập CodeBuild, tiếp tục với phần Xác minh Webhook để đảm bảo tự động hóa đang hoạt động chính xác.\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/",
	"title": "Thực thi Song song",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Thực thi Kiểm thử Song song Module này tập trung vào việc triển khai thực thi kiểm thử song song trong AWS CodeBuild để tối ưu hóa thời gian chạy kiểm thử và cải thiện hiệu quả pipeline. Bạn sẽ học cách cấu hình, quản lý và giám sát việc thực thi kiểm thử song song trong pipeline CI/CD.\nNhững gì Bạn sẽ Học Cấu hình Nhiều Kiểm thử\nTổ chức các dự án kiểm thử Phân loại kiểm thử Ưu tiên kiểm thử Lập kế hoạch tài nguyên Cấu hình Song song\nThiết lập song song CodeBuild Cấu hình trình chạy kiểm thử Phân bổ tài nguyên Cô lập môi trường Tổng hợp Kết quả\nKết hợp kết quả kiểm thử Chiến lược báo cáo Xử lý lỗi Hợp nhất trạng thái So sánh Hiệu năng\nĐo lường cải thiện Phân tích điểm nghẽn Tối ưu hóa thực thi Sử dụng tài nguyên Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 3 (Kiểm thử Đơn vị Tự động) Hiểu biết về AWS CodeBuild Quen thuộc với các khái niệm thực thi kiểm thử Kiến thức cơ bản về xử lý song song Ước tính Thời gian Tổng thời gian Module: ~2 giờ Thời gian mỗi Phần: 30 phút Cấu trúc Module Thiết lập Nhiều Kiểm thử\nTổ chức kiểm thử Thiết lập cấu hình Cấu hình Thực thi Song song\nThiết lập xử lý song song Quản lý tài nguyên Tổng hợp Kết quả\nKết hợp kết quả Tạo báo cáo So sánh Tốc độ\nPhân tích hiệu năng Kỹ thuật tối ưu hóa Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nCấu hình thực thi kiểm thử song song Cải thiện tốc độ thực thi kiểm thử Triển khai tổng hợp kết quả Tối ưu hóa sử dụng tài nguyên Đo lường cải thiện hiệu năng Hãy bắt đầu với Thiết lập Nhiều Kiểm thử!\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.4-view-results/",
	"title": "Xem Kết quả",
	"tags": [],
	"description": "",
	"content": "Xem Kết quả Kiểm thử Tổng quan Trong phần này, chúng ta sẽ khám phá cách xem, phân tích và diễn giải kết quả kiểm thử từ AWS CodeBuild. Chúng ta sẽ học cách truy cập báo cáo kiểm thử, hiểu các chỉ số độ bao phủ và đưa ra quyết định dựa trên dữ liệu về chiến lược kiểm thử.\nCác bước Thực hiện 1. Truy cập Kết quả Kiểm thử trong AWS Console Điều hướng đến CodeBuild:\nMở AWS Console Đi đến CodeBuild Chọn dự án của bạn Nhấp vào build mới nhất Xem Báo cáo Kiểm thử:\nChọn tab \u0026ldquo;Reports\u0026rdquo; Tìm lần thực thi kiểm thử mới nhất Xem kết quả chi tiết 2. Phân tích Báo cáo Kiểm thử qua CLI Lấy thông tin build: aws codebuild batch-get-builds \\ --ids \u0026lt;build-id\u0026gt; \\ --query \u0026#39;builds[].testResults\u0026#39; Lấy chi tiết báo cáo kiểm thử: aws codebuild batch-get-test-reports \\ --report-arns \u0026lt;report-arn\u0026gt; \\ --query \u0026#39;testReports[].testResults\u0026#39; 3. Xem Báo cáo Độ bao phủ Truy cập báo cáo độ bao phủ HTML: aws s3 cp \\ s3://\u0026lt;bucket-name\u0026gt;/coverage/index.html \\ ./coverage-report.html Phân tích chỉ số độ bao phủ: aws codebuild batch-get-reports \\ --reports \u0026lt;report-id\u0026gt; \\ --query \u0026#39;reports[].coveragePercentage\u0026#39; Hiểu Kết quả Kiểm thử Tổng quan Trạng thái Kiểm thử\nTổng số Kiểm thử Đã Chạy Kiểm thử Đã Pass Kiểm thử Thất bại Kiểm thử Bỏ qua Thời gian Kiểm thử Chỉ số Độ bao phủ\nĐộ bao phủ Dòng Độ bao phủ Nhánh Độ bao phủ Phương thức Độ bao phủ Lớp Cấu trúc Báo cáo Kiểm thử\n{ \u0026#34;testResults\u0026#34;: { \u0026#34;total\u0026#34;: 25, \u0026#34;passed\u0026#34;: 23, \u0026#34;failed\u0026#34;: 1, \u0026#34;skipped\u0026#34;: 1, \u0026#34;duration\u0026#34;: 3.45, \u0026#34;coverage\u0026#34;: { \u0026#34;lines\u0026#34;: 85.5, \u0026#34;branches\u0026#34;: 78.3, \u0026#34;functions\u0026#34;: 90.0 } } } Công cụ Trực quan hóa Giao diện AWS Console\nXu hướng kết quả kiểm thử Đồ thị độ bao phủ Phân tích lỗi Báo cáo Tùy chỉnh\n# Tạo báo cáo HTML tùy chỉnh dotnet reportgenerator \\ -reports:\u0026#34;**/coverage.cobertura.xml\u0026#34; \\ -targetdir:\u0026#34;custom-report\u0026#34; \\ -reporttypes:Html_Dark Các Thực hành Tốt nhất Giám sát Thường xuyên\nKiểm tra kết quả sau mỗi lần build Theo dõi xu hướng theo thời gian Thiết lập thông báo Phân tích Kết quả\nĐiều tra lỗi ngay lập tức Theo dõi xu hướng độ bao phủ Ghi chép phát hiện Quản lý Báo cáo\nLưu trữ báo cáo lịch sử Duy trì tài liệu Chia sẻ thông tin với nhóm Hướng dẫn Xử lý Sự cố Thiếu Kết quả\nKiểm tra cấu hình build Xác minh tạo báo cáo Xem xét cài đặt lưu trữ Chỉ số Không chính xác\nXác thực cấu hình kiểm thử Kiểm tra cài đặt độ bao phủ Xem xét bộ lọc loại trừ Vấn đề Truy cập\nXác minh quyền IAM Kiểm tra chính sách bucket S3 Xem xét nhóm bảo mật Tích hợp với Công cụ Phát triển Tích hợp IDE { \u0026#34;dotnet-test-explorer.testProjectPath\u0026#34;: \u0026#34;**/*Tests.csproj\u0026#34;, \u0026#34;dotnet-test-explorer.autoWatch\u0026#34;: true } Tích hợp GitHub name: Cập nhật PR với Kết quả Kiểm thử on: workflow_run: workflows: [\u0026#34;CodeBuild Tests\u0026#34;] types: [completed] Bước tiếp theo Sau khi hiểu cách xem và phân tích kết quả kiểm thử, tiếp tục với phần Sửa Lỗi để học cách xử lý và giải quyết các lỗi kiểm thử một cách hiệu quả.\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/",
	"title": "Kiểm thử Hiệu năng",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Kiểm thử Hiệu năng Module này tập trung vào việc triển khai kiểm thử hiệu năng trong pipeline CI/CD sử dụng AWS CodeBuild. Bạn sẽ học cách viết, thực thi và phân tích các kiểm thử hiệu năng để đảm bảo ứng dụng của bạn đáp ứng các yêu cầu về hiệu năng.\nNhững gì Bạn sẽ Học Viết Kiểm thử Hiệu năng\nThiết kế kịch bản kiểm thử Triển khai kiểm thử tải Tạo kiểm thử áp lực Chỉ số hiệu năng Tích hợp CI/CD\nCấu hình pipeline Tự động hóa kiểm thử Quản lý tài nguyên Thiết lập môi trường Xuất Kết quả\nThu thập dữ liệu Tổng hợp chỉ số Tạo báo cáo Phân tích xu hướng Phân tích Hiệu năng\nDiễn giải chỉ số Xác định điểm nghẽn Chiến lược tối ưu hóa Đề xuất cải thiện Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 4 (Thực thi Song song) Hiểu biết về khái niệm hiệu năng Quen thuộc với công cụ kiểm thử k6 Kiến thức cơ bản về phân tích chỉ số Ước tính Thời gian Tổng thời gian Module: ~3 giờ Thời gian mỗi Phần: 45 phút Cấu trúc Module Viết Kiểm thử Hiệu năng\nTạo kịch bản kiểm thử Thiết lập chỉ số hiệu năng Tích hợp vào CI/CD\nTích hợp pipeline Thiết lập tự động hóa Xuất Kết quả\nThu thập dữ liệu Tạo báo cáo Phân tích Hiệu năng\nKỹ thuật phân tích Chiến lược tối ưu hóa Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nTạo các kiểm thử hiệu năng toàn diện Tích hợp kiểm thử vào pipeline CI/CD Triển khai thu thập kết quả Phân tích chỉ số hiệu năng Xác định cơ hội tối ưu hóa Hãy bắt đầu với Viết Kiểm thử Hiệu năng!\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.5-fix-failures/",
	"title": "Sửa Lỗi",
	"tags": [],
	"description": "",
	"content": "Sửa Lỗi Kiểm thử Tổng quan Trong phần này, chúng ta sẽ học cách chẩn đoán, sửa và ngăn ngừa lỗi kiểm thử một cách hiệu quả trong pipeline kiểm thử tự động. Chúng ta sẽ tìm hiểu về chiến lược gỡ lỗi, các mẫu lỗi phổ biến và thực hành tốt nhất để duy trì bộ kiểm thử mạnh mẽ.\nCác bước Thực hiện 1. Phân tích Lỗi Kiểm thử Xem xét chi tiết lỗi: # Lấy kết quả kiểm thử chi tiết aws codebuild batch-get-test-reports \\ --report-arns \u0026lt;report-arn\u0026gt; \\ --query \u0026#39;testReports[].testCases[?status==`FAILED`]\u0026#39; Kiểm tra log kiểm thử: # Lấy log build aws codebuild get-build-logs --id \u0026lt;build-id\u0026gt; 2. Các Loại Lỗi Phổ biến và Giải pháp Lỗi Khẳng định // Trước: Kiểm thử Mong manh [Fact] public void Add_ReturnsSum() { var result = _calculator.Add(2, 3); Assert.Equal(5, result); } // Sau: Kiểm thử Mạnh mẽ [Theory] [InlineData(2, 3, 5)] [InlineData(-1, 1, 0)] [InlineData(0, 0, 0)] public void Add_ReturnsExpectedSum(int a, int b, int expected) { var result = _calculator.Add(a, b); Assert.Equal(expected, result); } Vấn đề Thời gian // Trước: Kiểm thử Nhạy cảm với Thời gian [Fact] public async Task Operation_CompletesInTime() { var result = await _service.LongOperation(); Assert.True(result.IsComplete); } // Sau: Kiểm thử Đáng tin cậy [Fact] public async Task Operation_CompletesInTime() { var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5)); var result = await _service.LongOperation() .WithTimeout(cts.Token); Assert.True(result.IsComplete); } Phụ thuộc Môi trường // Trước: Kiểm thử Phụ thuộc Môi trường [Fact] public void Config_LoadsCorrectly() { var config = Configuration.Load(); Assert.NotNull(config); } // Sau: Kiểm thử Độc lập với Môi trường [Fact] public void Config_LoadsCorrectly() { var mockConfig = new MockConfiguration(); var config = Configuration.Load(mockConfig); Assert.NotNull(config); } 3. Triển khai Sửa lỗi Tạo nhánh sửa lỗi: git checkout -b fix/test-failures Áp dụng sửa đổi: # Cập nhật file kiểm thử git add . git commit -m \u0026#34;fix: giải quyết lỗi kiểm thử trong calculator tests\u0026#34; Xác minh cục bộ: dotnet test --filter \u0026#34;FailedTestName\u0026#34; Chiến lược Gỡ lỗi Gỡ lỗi Cục bộ { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Gỡ lỗi Kiểm thử\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;coreclr\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;dotnet\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;test\u0026#34;, \u0026#34;--filter\u0026#34;, \u0026#34;FailedTest\u0026#34;] } } Gỡ lỗi Từ xa phases: build: commands: - dotnet test --collect:\u0026#34;Code Coverage\u0026#34; --logger \u0026#34;console;verbosity=detailed\u0026#34; Các Thực hành Tốt nhất Cô lập Kiểm thử\nCác ca kiểm thử độc lập Môi trường kiểm thử sạch Kiểm soát phụ thuộc Xử lý Lỗi\nThông báo lỗi rõ ràng Xử lý ngoại lệ phù hợp Khẳng định có ý nghĩa Bảo trì Kiểm thử\nCập nhật thường xuyên Loại bỏ kiểm thử không ổn định Ghi chép vấn đề đã biết Chiến lược Phòng ngừa Đánh giá Mã nguồn # .github/pull_request_template.md ## Thay đổi Kiểm thử - [ ] Đã thêm/cập nhật kiểm thử - [ ] Tất cả kiểm thử pass cục bộ - [ ] Không có kiểm thử không ổn định mới Cổng Chất lượng # buildspec.yml phases: post_build: commands: - | if [ \u0026#34;$TEST_FAILURES\u0026#34; -gt 0 ]; then echo \u0026#34;Cổng chất lượng thất bại: $TEST_FAILURES lỗi kiểm thử\u0026#34; exit 1 fi Giám sát và Cảnh báo aws cloudwatch put-metric-alarm \\ --alarm-name TyLeLoiKiemThu \\ --metric-name FailedTests \\ --threshold 5 Bước tiếp theo Sau khi sửa lỗi kiểm thử và triển khai các biện pháp phòng ngừa, tiếp tục với phần Thực thi Song song để học cách tối ưu hóa thời gian thực thi kiểm thử.\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.5-webhook-verify/",
	"title": "Xác minh Webhook",
	"tags": [],
	"description": "",
	"content": "Xác minh Tích hợp Webhook Tổng quan Trong phần này, chúng ta sẽ xác minh rằng tích hợp webhook giữa GitHub và AWS CodeBuild đang hoạt động chính xác. Điều này đảm bảo pipeline kiểm thử tự động của chúng ta được kích hoạt tự động khi có thay đổi code.\nYêu cầu tiên quyết Dự án CodeBuild đã được thiết lập từ phần trước GitHub repository đã được cấu hình webhook Các quyền IAM cần thiết Các bước thực hiện 1. Xác minh Cấu hình Webhook Kiểm tra cài đặt webhook trong GitHub:\nVào repository settings Điều hướng đến Webhooks Xác minh webhook AWS CodeBuild tồn tại Kiểm tra trạng thái webhook (nên hiển thị các lần gửi gần đây) # Liệt kê webhooks sử dụng GitHub CLI gh api repos/{owner}/{repo}/hooks 2. Kiểm tra Kích hoạt Push Tạo một thay đổi nhỏ trong repository: echo \u0026#34;# Thay đổi Kiểm tra\u0026#34; \u0026gt;\u0026gt; README.md git add README.md git commit -m \u0026#34;test: xác minh kích hoạt webhook\u0026#34; git push origin main Theo dõi trạng thái build: # Lấy thông tin build mới nhất aws codebuild list-builds-for-project --project-name dotnet-test-automation # Lấy thông tin chi tiết về build aws codebuild batch-get-builds --ids \u0026lt;build-id\u0026gt; 3. Kiểm tra Kích hoạt Pull Request Tạo nhánh mới: git checkout -b feature/test-webhook echo \u0026#34;## Kiểm tra Kích hoạt PR\u0026#34; \u0026gt;\u0026gt; README.md git add README.md git commit -m \u0026#34;test: xác minh webhook PR\u0026#34; git push origin feature/test-webhook Tạo Pull Request: gh pr create --title \u0026#34;test: xác minh webhook\u0026#34; --body \u0026#34;Kiểm tra kích hoạt webhook CodeBuild\u0026#34; Theo dõi kiểm tra PR trong giao diện GitHub 4. Xác minh Build Logs Kiểm tra CloudWatch Logs: Điều hướng đến console CloudWatch Tìm log group: /aws/codebuild/dotnet-test-automation Xem xét các luồng log mới nhất Kiểm tra Console CodeBuild: Xem lịch sử build Kiểm tra các giai đoạn build Xác minh báo cáo kiểm thử Hướng dẫn Xử lý Sự cố Vấn đề Thường gặp Webhook Không Kích hoạt # Kiểm tra trạng thái gửi webhook gh api repos/{owner}/{repo}/hooks/{hook_id}/deliveries # Xác minh cấu hình webhook aws codebuild batch-get-projects --names dotnet-test-automation Lỗi Build Kiểm tra quyền IAM Xác minh cú pháp buildspec.yml Xem xét biến môi trường Vấn đề Kết nối GitHub # Kiểm tra kết nối GitHub gh auth status # Xác minh quyền truy cập repository gh repo view Bảo mật Webhook Cài đặt Bảo mật Webhook Chỉ sử dụng endpoint HTTPS Cấu hình token bí mật Giới hạn các sự kiện webhook Giám sát Hoạt động Webhook # Xem các lần gửi webhook gần đây gh api repos/{owner}/{repo}/hooks/{hook_id}/deliveries \\ --jq \u0026#39;.[0:5]|.[]|{id, status, delivered_at}\u0026#39; Các Thực hành Tốt nhất Xác minh Thường xuyên Kiểm tra kích hoạt webhook định kỳ Theo dõi tỷ lệ build thành công Xem xét log gửi webhook Xử lý Lỗi Thiết lập cảnh báo CloudWatch Cấu hình thông báo cho các lỗi Triển khai cơ chế thử lại Tài liệu Ghi chép cấu hình webhook Duy trì hướng dẫn xử lý sự cố Ghi lại các vấn đề thường gặp và giải pháp Bước tiếp theo Sau khi xác minh tích hợp webhook:\nTiếp tục với phần Kiểm thử Đơn vị Tự động Thiết lập giám sát và cảnh báo Tạo tài liệu quy trình cho nhóm tham khảo "
},
{
	"uri": "//localhost:1313/vi/6-security-testing/",
	"title": "Kiểm thử bảo mật với CodeQL",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tích hợp công cụ kiểm thử bảo mật CodeQL vào GitHub repository để tự động quét mã nguồn, phát hiện các lỗ hổng bảo mật phổ biến như injection, lỗi logic, và rò rỉ dữ liệu.\n🎯 Mục tiêu Kích hoạt GitHub CodeQL Analysis Kiểm tra và hiểu các cảnh báo bảo mật Sửa các lỗ hổng được phát hiện (nếu có) Vô hiệu hóa kiểm thử khi không cần thiết 🧩 Các bước Bước Nội dung Thư mục 6.1 Kích hoạt CodeQL trên GitHub 6.1-enable-codeql 6.2 Xem và phân tích cảnh báo 6.2-review-alerts 6.3 Sửa lỗ hổng bảo mật 6.3-fix-vulnerabilities 6.4 Vô hiệu hoá kiểm thử nếu cần 6.4-disable-if-needed "
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/",
	"title": "Theo dõi, báo cáo &amp; tối ưu chi phí",
	"tags": [],
	"description": "",
	"content": "Sau khi kiểm thử tự động hoạt động ổn định, bạn cần theo dõi quá trình build, báo cáo kết quả, và tối ưu chi phí vận hành. AWS cung cấp các công cụ như CloudWatch Logs, Cost Explorer và thiết lập cấu hình phù hợp để giảm chi phí CI/CD.\n🎯 Mục tiêu Xem log kiểm thử từ CloudWatch Logs Phân tích chi phí build với CodeBuild Tối ưu cấu hình build (thời gian, compute type) Ước lượng tài nguyên và chi phí 🧩 Các bước Bước Nội dung Thư mục 7.1 Theo dõi log từ CloudWatch 7.1-cloudwatch-logs 7.2 Phân tích chi phí sử dụng 7.2-analyze-cost 7.3 Tối ưu cấu hình CodeBuild 7.3-optimize-config 7.4 Ước lượng chi phí và tài nguyên 7.4-estimate-usage "
},
{
	"uri": "//localhost:1313/vi/8-clean-up/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/.net-8/",
	"title": ".NET 8",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/automated-testing/",
	"title": "Automated Testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/ci/cd/",
	"title": "CI/CD",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/devops/",
	"title": "DevOps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]