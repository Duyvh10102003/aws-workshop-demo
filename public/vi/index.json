[
{
	"uri": "//localhost:1313/vi/",
	"title": "Automated Testing with AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Workshop: Kiểm thử tự động với AWS CodeBuild và thực thi song song Tổng quan Trong workshop này, bạn sẽ học cách xây dựng một hệ thống kiểm thử tự động hiện đại cho ứng dụng web viết bằng .NET 8 MVC, sử dụng các dịch vụ AWS như CodeBuild, CloudWatch, và CodeQL.\nThông qua từng phần thực hành, bạn sẽ:\nThiết lập pipeline CI kiểm thử tự động khi push code lên GitHub Thực thi kiểm thử song song (parallel execution) để tối ưu thời gian Tích hợp kiểm thử hiệu năng và bảo mật (CodeQL) Theo dõi logs, phân tích chi phí, và dọn dẹp tài nguyên sau workshop Dọn dẹp tài nguyên AWS sau khi thử nghiệm Nội dung workshop Giới thiệu \u0026amp; mục tiêu Chuẩn bị môi trường Thiết lập kiểm thử tự động Thực thi song song \u0026amp; tổng hợp kết quả Kiểm thử hiệu năng Kiểm thử bảo mật với CodeQL Theo dõi, báo cáo \u0026amp; tối ưu chi phí Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.1-cloudwatch-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "Thiết lập CloudWatch Logs Cấu hình Nhóm Log [Chèn ảnh: Thiết lập nhóm log CloudWatch]\nTạo Nhóm Log\naws logs create-log-group --log-group-name /aws/codebuild/test-automation aws logs put-retention-policy --log-group-name /aws/codebuild/test-automation --retention-in-days 30 [Chèn ảnh: Tạo nhóm log]\nCấu hình Luồng Log [Chèn ảnh: Thiết lập luồng log]\nLog build Log thực thi kiểm thử Chỉ số hiệu năng Thiết lập Chỉ số [Chèn ảnh: Cấu hình chỉ số]\nTạo Bộ lọc Chỉ số\naws logs put-metric-filter \\ --log-group-name /aws/codebuild/test-automation \\ --filter-name test-duration \\ --filter-pattern \u0026#34;[timestamp, duration]\u0026#34; \\ --metric-transformations \\ metricName=TestDuration,metricNamespace=TestAutomation,metricValue=$duration [Chèn ảnh: Tạo bộ lọc chỉ số]\nCấu hình Bảng điều khiển [Chèn ảnh: Thiết lập bảng điều khiển]\nChỉ số chi phí Sử dụng tài nguyên Thống kê thực thi kiểm thử Thiết lập Cảnh báo [Chèn ảnh: Cấu hình cảnh báo]\nTạo Cảnh báo CloudWatch\nNgưỡng chi phí Giới hạn tài nguyên Tỷ lệ lỗi [Chèn ảnh: Tạo cảnh báo] Cấu hình Thông báo [Chèn ảnh: Thiết lập thông báo]\nCảnh báo email Chủ đề SNS Webhook tích hợp Danh sách Xác minh Nhóm log đã tạo Chỉ số đã cấu hình Bảng điều khiển đã thiết lập Cảnh báo hoạt động Chính sách lưu giữ đã đặt Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề logging phổ biến]\nVấn đề Thu thập Log\nThiếu log Gửi chậm Vấn đề quyền Vấn đề Chỉ số\nKhớp bộ lọc Tổng hợp dữ liệu Lỗi tính toán Vấn đề Cảnh báo\nGửi thông báo Cài đặt ngưỡng Lỗi tích hợp Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất logging]\nQuản lý Log\nLogging có cấu trúc Danh mục rõ ràng Lưu giữ phù hợp Cấu hình Chỉ số\nChỉ số liên quan Tổng hợp phù hợp Chiều hữu ích Bước tiếp theo Sau khi thiết lập CloudWatch logs, tiếp tục với Phân tích Chi phí\n"
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Workshop: Tự động hóa Kiểm thử Hiện đại với AWS CodeBuild \u0026amp; Thực thi Song song Tổng quan Kiến trúc Yêu cầu Tiên quyết Tài khoản AWS với quyền quản trị Tài khoản GitHub Kiến thức cơ bản về phát triển .NET Visual Studio Code hoặc IDE ưa thích AWS CLI đã cài đặt cục bộ Những gì Bạn sẽ Xây dựng Trong workshop này, bạn sẽ:\nThiết lập pipeline CI/CD hoàn chỉnh cho tự động hóa kiểm thử Triển khai kiểm thử đơn vị tự động Cấu hình thực thi kiểm thử song song Thêm kiểm thử hiệu năng Kích hoạt quét bảo mật Giám sát và tối ưu chi phí Ước tính Thời gian Tổng thời gian workshop: ~8 giờ\nThiết lập Môi trường: 1 giờ Kiểm thử Tự động: 2 giờ Thực thi Song song: 1.5 giờ Kiểm thử Hiệu năng: 1.5 giờ Kiểm thử Bảo mật: 1 giờ Giám sát Chi phí: 0.5 giờ Dọn dẹp: 0.5 giờ Ước tính Chi phí Chi phí AWS ước tính để hoàn thành workshop này:\nCodeBuild: ~$1-2 CloudWatch: ~$1 S3 Storage: \u0026lt; $1 Tổng: ~$3-4 Hãy bắt đầu với Thiết lập Môi trường!\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.1-enable-codeql/",
	"title": "Kích hoạt CodeQL",
	"tags": [],
	"description": "",
	"content": "Kích hoạt Phân tích CodeQL Thiết lập Môi trường CodeQL [Chèn ảnh: Thiết lập CodeQL]\nCấu hình GitHub Repository\nKích hoạt GitHub Actions Cấu hình cài đặt bảo mật Thiết lập quyền [Chèn ảnh: Cấu hình GitHub] Tạo Workflow CodeQL\nname: \u0026#34;Phân tích CodeQL\u0026#34; on: push: branches: [ main ] pull_request: branches: [ main ] schedule: - cron: \u0026#39;0 0 * * 0\u0026#39; jobs: analyze: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Initialize CodeQL uses: github/codeql-action/init@v2 with: languages: csharp [Chèn ảnh: Cấu hình workflow]\nCấu hình Cài đặt Phân tích [Chèn ảnh: Cấu hình phân tích]\nThiết lập Bộ Truy vấn\nChọn truy vấn bảo mật Cấu hình truy vấn tùy chỉnh Đặt phạm vi phân tích [Chèn ảnh: Cấu hình truy vấn] Cấu hình Tích hợp Build [Chèn ảnh: Tích hợp build]\nCài đặt build Kích hoạt phân tích Xử lý kết quả Thiết lập Thông báo [Chèn ảnh: Thiết lập thông báo]\nCấu hình Cảnh báo Cảnh báo bảo mật Thông báo workflow Thông báo nhóm [Chèn ảnh: Cấu hình cảnh báo] Danh sách Xác minh CodeQL đã kích hoạt Workflow đã cấu hình Truy vấn đã chọn Thông báo đã thiết lập Tích hợp đã kiểm thử Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề CodeQL phổ biến]\nVấn đề Thiết lập\nVấn đề quyền Lỗi cấu hình Lỗi tích hợp Vấn đề Phân tích\nLỗi build Lỗi truy vấn Hạn chế tài nguyên Vấn đề Thông báo\nGửi cảnh báo Vấn đề cấu hình Quyền truy cập Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất CodeQL]\nCấu hình\nCập nhật thường xuyên Tài liệu rõ ràng Phạm vi phù hợp Quản lý Phân tích\nXem xét thường xuyên Giám sát hiệu năng Theo dõi kết quả Bước tiếp theo Sau khi kích hoạt CodeQL, tiếp tục với Xem xét Cảnh báo\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.1-multiple-tests/",
	"title": "Thiết lập Nhiều Kiểm thử",
	"tags": [],
	"description": "",
	"content": "Thiết lập Nhiều Dự án Kiểm thử Tạo Cấu trúc Kiểm thử [Chèn ảnh: Cấu trúc giải pháp trong VS Code]\nTạo Dự án Kiểm thử\nDự án Kiểm thử Đơn vị Dự án Kiểm thử Tích hợp Dự án Kiểm thử Hiệu năng [Chèn ảnh: Quy trình tạo dự án] Cấu hình Tham chiếu Dự án [Chèn ảnh: Thêm tham chiếu dự án]\nThêm tham chiếu dự án chính Cấu hình thứ tự build Thiết lập dependencies Tổ chức Danh mục Kiểm thử [Chèn ảnh: Cấu trúc tổ chức kiểm thử]\nKiểm thử Đơn vị\nControllers Services Models [Chèn ảnh: Cấu trúc kiểm thử đơn vị] Kiểm thử Tích hợp [Chèn ảnh: Tổ chức kiểm thử tích hợp]\nKiểm thử API Kiểm thử Cơ sở dữ liệu Dịch vụ Bên ngoài Kiểm thử Hiệu năng [Chèn ảnh: Thiết lập kiểm thử hiệu năng]\nKiểm thử Tải Kiểm thử Áp lực Kiểm thử Độ bền Cấu hình Cài đặt Kiểm thử [Chèn ảnh: Cài đặt cấu hình kiểm thử]\nCài đặt Trình chạy Kiểm thử\nThứ tự thực thi Danh mục kiểm thử Cài đặt thời gian chờ [Chèn ảnh: Cấu hình trình chạy] Cấu hình Môi trường [Chèn ảnh: Cài đặt môi trường]\nMôi trường kiểm thử Dependencies Tài nguyên Danh sách Xác minh Dự án đã tạo thành công Tham chiếu đã cấu hình đúng Danh mục đã tổ chức hợp lý Cài đặt đã áp dụng đúng Build thành công Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề thiết lập phổ biến]\nCấu trúc Dự án\nVấn đề tham chiếu Thứ tự build Xung đột namespace Vấn đề Cấu hình\nLỗi cài đặt Thiết lập môi trường Vấn đề dependency Vấn đề Build\nXung đột dự án Không khớp phiên bản Vấn đề đường dẫn Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất tổ chức dự án]\nTổ chức Cấu trúc\nĐặt tên rõ ràng Nhóm logic Mẫu nhất quán Quản lý Cấu hình\nTách biệt môi trường Cài đặt chung Kiểm soát phiên bản Bước tiếp theo Sau khi thiết lập nhiều kiểm thử, tiếp tục với Cấu hình Thực thi Song song\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.1-website-setup/",
	"title": "Thiết lập Website",
	"tags": [],
	"description": "",
	"content": "Các Tùy Chọn Thiết Lập Website Bạn có hai lựa chọn để thiết lập website cho workshop này:\nTùy Chọn A: Sử Dụng Website Xem Phim Mẫu Fork repository website xem phim mẫu:\nTruy cập: https://github.com/Duyvh10102003/WebsiteXemPhim Nhấp vào nút \u0026ldquo;Fork\u0026rdquo; ở góc trên bên phải Chọn tài khoản GitHub của bạn làm điểm đến Clone repository đã fork:\ngit clone https://github.com/[TÊN-NGƯỜI-DÙNG]/WebsiteXemPhim.git cd WebsiteXemPhim Chuyển sang nhánh HoangDuy:\ngit checkout HoangDuy Tùy Chọn B: Sử Dụng Website Của Riêng Bạn Nếu bạn muốn sử dụng website của riêng mình, hãy làm theo các bước sau:\nTạo repository GitHub mới:\nTruy cập https://github.com/new Đặt tên cho repository Chọn chế độ hiển thị công khai hoặc riêng tư Khởi tạo với README nếu muốn Đẩy code website của bạn lên:\ngit init git add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/[TÊN-NGƯỜI-DÙNG]/[TÊN-REPO].git git push -u origin main Lưu Ý Quan Trọng Đảm bảo code website của bạn nằm ở thư mục gốc của repository Repository phải có thể truy cập được bởi AWS CodeBuild Nếu sử dụng repository riêng tư, sẽ cần thêm cấu hình cho AWS CodeBuild Bước Tiếp Theo Sau khi hoàn thành một trong hai tùy chọn trên, hãy tiếp tục với phần Cài Đặt Công Cụ Cần Thiết\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.1-write-performance-tests/",
	"title": "Viết Kiểm thử Hiệu năng",
	"tags": [],
	"description": "",
	"content": "Viết Kiểm thử Hiệu năng Thiết lập Công cụ k6 [Chèn ảnh: Cài đặt k6]\nCài đặt k6\nHướng dẫn tải xuống Các bước cài đặt Quy trình xác minh [Chèn ảnh: Xác minh cài đặt] Cấu hình Môi trường [Chèn ảnh: Cấu hình k6]\nThiết lập cơ bản Biến môi trường Cấu trúc kiểm thử Tạo Kiểm thử Tải Cơ bản [Chèn ảnh: Tạo kiểm thử tải cơ bản]\nViết Script Kiểm thử Tải import http from \u0026#39;k6/http\u0026#39;; import { check, sleep } from \u0026#39;k6\u0026#39;; export const options = { stages: [ { duration: \u0026#39;1m\u0026#39;, target: 20 }, { duration: \u0026#39;2m\u0026#39;, target: 20 }, { duration: \u0026#39;1m\u0026#39;, target: 0 }, ], }; export default function () { const response = http.get(\u0026#39;http://test.api/endpoint\u0026#39;); check(response, { \u0026#39;trạng thái là 200\u0026#39;: (r) =\u0026gt; r.status === 200, }); sleep(1); } [Chèn ảnh: Thực thi script] Triển khai Kịch bản Kiểm thử [Chèn ảnh: Triển khai kịch bản kiểm thử]\nTạo Ca Kiểm thử\nKiểm thử tải Kiểm thử áp lực Kiểm thử đột biến [Chèn ảnh: Các loại kiểm thử] Cấu hình Chỉ số [Chèn ảnh: Cấu hình chỉ số]\nThời gian phản hồi Tỷ lệ lỗi Thông lượng Danh sách Xác minh k6 đã cài đặt đúng Kiểm thử cơ bản đang chạy Chỉ số đang thu thập Kịch bản đã triển khai Kết quả đang ghi lại Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề k6 phổ biến]\nVấn đề Cài đặt\nVấn đề đường dẫn Dependencies Xung đột phiên bản Vấn đề Script\nLỗi cú pháp Vấn đề logic Giới hạn tài nguyên Vấn đề Thực thi\nVấn đề kết nối Hạn chế tài nguyên Lỗi thời gian chờ Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất kiểm thử hiệu năng]\nThiết kế Kiểm thử\nMục tiêu rõ ràng Kịch bản thực tế Chỉ số phù hợp Tổ chức Script\nMã module hóa Hàm có thể tái sử dụng Tài liệu rõ ràng Bước tiếp theo Sau khi viết kiểm thử hiệu năng, tiếp tục với Tích hợp CI/CD\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.1-codebuild-setup/",
	"title": "Viết Unit Test đầu tiên",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo một file test đơn giản để đảm bảo hệ thống CI/CD có thể chạy unit test đúng cách.\n✅ Mục tiêu Tạo test file đơn giản sử dụng xUnit Giả lập quá trình test có độ trễ Kiểm tra tính đúng đắn và hiệu năng khi chạy test song song sau này 📁 Các bước thực hiện Tạo file tại: Web.Tests/LuotXemTests.cs\nusing System.Threading; using Xunit; namespace Web.Tests { public class LuotXemTests { [Fact] public void Fake_LuotXem_Test1() { Thread.Sleep(1000); // giả lập test mất 1 giây Assert.True(true); } [Fact] public void Fake_LuotXem_Test2() { Thread.Sleep(1000); Assert.True(true); } } } ✅ Kiểm tra Chạy lệnh sau trong thư mục gốc để kiểm tra test:\ndotnet test Kết quả mong đợi:\nPassed! - Failed: 0, Passed: 2, Skipped: 0 📌 Ghi chú Các Thread.Sleep() được sử dụng để mô phỏng thời gian xử lý của test. Bạn sẽ thấy hiệu quả rõ rệt khi áp dụng Parallel Execution (phần 4).\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.2-install-tools/",
	"title": "Cài Đặt Công Cụ Cần Thiết",
	"tags": [],
	"description": "",
	"content": "Cài Đặt Công Cụ Cần Thiết Để tiến hành kiểm thử tự động bằng AWS CodeBuild, bạn cần cài đặt và cấu hình một số công cụ.\n1. Cài Đặt AWS CLI Cho Windows: Tải trình cài đặt AWS CLI MSI:\nTruy cập: https://aws.amazon.com/cli/ Tải xuống bản cài đặt Windows x64 Chạy trình cài đặt:\nNhấp đúp vào file đã tải Làm theo hướng dẫn cài đặt Kiểm tra cài đặt bằng cách mở Command Prompt và chạy: aws --version Cho Linux: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Cho macOS: brew install awscli 2. Cấu Hình AWS CLI Lấy thông tin xác thực AWS:\nAccess Key ID Secret Access Key Vùng mặc định (ví dụ: us-east-1) Chạy cấu hình:\naws configure Nhập thông tin xác thực khi được yêu cầu:\nAWS Access Key ID: [Access Key của bạn] AWS Secret Access Key: [Secret Key của bạn] Default region name: [Vùng của bạn] Default output format: json 3. Cài Đặt Git (nếu chưa có) Cho Windows: Tải từ: https://git-scm.com/download/win Chạy trình cài đặt với tùy chọn mặc định Cho Linux: sudo apt-get update sudo apt-get install git Cho macOS: brew install git 4. Visual Studio Code (Tùy chọn nhưng khuyến nghị) Tải VS Code:\nTruy cập: https://code.visualstudio.com/ Chọn phiên bản cho nền tảng của bạn Cài đặt các tiện ích mở rộng được khuyến nghị:\nAWS Toolkit C# Dev Kit Git Extension Pack Các Bước Xác Minh Kiểm tra AWS CLI: aws --version Kiểm tra Git: git --version Kiểm tra cấu hình AWS: aws sts get-caller-identity Xử Lý Sự Cố Vấn đề với AWS CLI:\nĐảm bảo thông tin xác thực AWS chính xác Kiểm tra quyền của người dùng IAM Xác minh vùng mặc định được cài đặt đúng Vấn đề với Git:\nĐảm bảo Git nằm trong PATH của hệ thống Cấu hình Git với thông tin của bạn: git config --global user.name \u0026#34;Tên Của Bạn\u0026#34; git config --global user.email \u0026#34;email.cua.ban@example.com\u0026#34; Bước Tiếp Theo Sau khi cài đặt và cấu hình tất cả công cụ cần thiết, tiếp tục với phần Thiết Lập Dự Án CodeBuild\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.2-buildspec-setup/",
	"title": "Cấu hình Buildspec để chạy Unit Test và sinh báo cáo",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ tạo file buildspec.yml để:\nCài đặt tool tạo báo cáo test Chạy unit test có ghi log kết quả Sinh HTML test report dễ xem Chuẩn bị sẵn cho các bước upload kết quả hoặc phân tích ✅ Mục tiêu Cài đặt dotnet-reportgenerator-globaltool Chạy test và xuất log theo định dạng .trx Sinh báo cáo HTML dễ đọc 📁 Cấu trúc thư mục YourProject/ ├── src/ │ └── Web/ │ └── Web.Tests/ ├── buildspec.yml └── TestReport/ └── index.html 🧾 Nội dung file buildspec.yml version: 0.2 phases: install: runtime-versions: dotnet: 8.0 commands: - echo === Installing reportgenerator tool === - dotnet tool install -g dotnet-reportgenerator-globaltool - export PATH=\u0026#34;$PATH:/root/.dotnet/tools\u0026#34; build: commands: - echo === Restoring dependencies === - dotnet restore - echo === Building solution === - dotnet build --no-restore - echo === Running unit tests === - dotnet test Web.Tests/Web.Tests.csproj --logger \u0026#34;trx;LogFileName=test_results.trx\u0026#34; - echo === Generating HTML test report === - reportgenerator \u0026#34;-reports:**/test_results.trx\u0026#34; \u0026#34;-targetdir:TestReport\u0026#34; -reporttypes:Html artifacts: files: - TestReport/**/* discard-paths: no 💡 Giải thích Mục Mô tả dotnet tool install Cài đặt tool sinh báo cáo test dưới dạng HTML dotnet test + \u0026ndash;logger Ghi kết quả test ra file .trx (Test Result XML) reportgenerator Tạo báo cáo HTML từ file .trx artifacts.files Chỉ định output cần lưu trữ (báo cáo test) 🔄 Các bước thực hiện Tạo file buildspec.yml trong thư mục gốc của dự án Copy nội dung buildspec từ hướng dẫn Commit và push lên repository Kiểm tra build trong CodeBuild ✅ Kiểm tra Sau khi push code, vào AWS CodeBuild và kiểm tra:\nBuild được trigger tự động Các phase chạy thành công Artifacts chứa báo cáo test HTML Mở file TestReport/index.html để xem kết quả chi tiết Thêm ảnh chụp màn hình báo cáo test của bạn tại đây\n📌 Ghi chú File .trx chứa thông tin chi tiết về kết quả test Báo cáo HTML giúp dễ dàng xem và phân tích kết quả Artifacts được lưu lại để tham khảo sau này Cấu hình này là nền tảng cho việc tích hợp với các công cụ phân tích khác "
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.2-configure-parallel/",
	"title": "Cấu hình Thực thi Song song",
	"tags": [],
	"description": "",
	"content": "Cấu hình Thực thi Kiểm thử Song song Cấu hình AWS CodeBuild [Chèn ảnh: Cấu hình song song CodeBuild]\nCập nhật Dự án Build\nBật build song song Cấu hình tài nguyên tính toán Đặt giới hạn đồng thời [Chèn ảnh: Cài đặt build] Cấu hình Build Specification [Chèn ảnh: Cấu hình BuildSpec]\nversion: 0.2 batch: fast-fail: true build-graph: - identifier: UnitTests buildspec: unit.yml - identifier: IntegrationTests buildspec: integration.yml Thiết lập Song song hóa Kiểm thử [Chèn ảnh: Cài đặt song song kiểm thử]\nCấu hình Trình chạy Kiểm thử\nĐặt số lượng kiểm thử song song tối đa Cấu hình nhóm kiểm thử Đặt thứ tự thực thi [Chèn ảnh: Cấu hình trình chạy] Quản lý Tài nguyên [Chèn ảnh: Cài đặt tài nguyên]\nPhân bổ bộ nhớ Sử dụng CPU Tài nguyên mạng Cấu hình Môi trường [Chèn ảnh: Thiết lập môi trường]\nCấu hình Môi trường Kiểm thử\nMôi trường riêng biệt Cô lập tài nguyên Tách biệt dữ liệu [Chèn ảnh: Cô lập môi trường] Quản lý Phụ thuộc [Chèn ảnh: Cấu hình phụ thuộc]\nTài nguyên dùng chung Dịch vụ bên ngoài Dữ liệu kiểm thử Danh sách Xác minh Cấu hình song song hoàn tất Tài nguyên được phân bổ đúng Môi trường được cô lập Phụ thuộc được quản lý Build thành công Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề song song phổ biến]\nXung đột Tài nguyên\nVấn đề bộ nhớ Nghẽn CPU Tranh chấp mạng Vấn đề Môi trường\nLỗi cô lập Chia sẻ tài nguyên Xung đột cấu hình Vấn đề Build\nVấn đề đồng thời Vấn đề thời gian Giới hạn tài nguyên Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất thực thi song song]\nQuản lý Tài nguyên\nĐịnh cỡ phù hợp Cân bằng tải Giám sát tài nguyên Tổ chức Kiểm thử\nKiểm thử độc lập Thực thi theo nhóm Phụ thuộc rõ ràng Bước tiếp theo Sau khi cấu hình thực thi song song, tiếp tục với Tổng hợp Kết quả\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.2-analyze-cost/",
	"title": "Phân tích Chi phí",
	"tags": [],
	"description": "",
	"content": "Phân tích Chi phí Cơ sở Hạ tầng Thiết lập Phân tích Chi phí [Chèn ảnh: Thiết lập phân tích chi phí]\nCấu hình Cost Explorer\nKích hoạt Cost Explorer Thiết lập danh mục chi phí Cấu hình thẻ [Chèn ảnh: Cấu hình Cost Explorer] Tạo Báo cáo Chi phí\n# cost_analysis.py def analyze_costs(start_date, end_date): costs = get_aws_costs(start_date, end_date) return { \u0026#39;total\u0026#39;: sum(costs), \u0026#39;by_service\u0026#39;: group_by_service(costs), \u0026#39;by_tag\u0026#39;: group_by_tag(costs), \u0026#39;trends\u0026#39;: analyze_trends(costs) } [Chèn ảnh: Tạo báo cáo chi phí]\nGiám sát Sử dụng Tài nguyên [Chèn ảnh: Giám sát tài nguyên]\nTheo dõi Tiêu thụ Tài nguyên\nSử dụng tính toán Sử dụng lưu trữ Lưu lượng mạng [Chèn ảnh: Theo dõi tài nguyên] Phân tích Mẫu Sử dụng [Chèn ảnh: Phân tích sử dụng]\nThời điểm sử dụng cao điểm Thời gian không hoạt động Hiệu quả tài nguyên Tạo Báo cáo Chi phí [Chèn ảnh: Tạo báo cáo]\nTạo Bảng điều khiển Chi phí\nChi phí dịch vụ Chi phí tài nguyên Phân tích xu hướng [Chèn ảnh: Tạo bảng điều khiển] Thiết lập Báo cáo Định kỳ [Chèn ảnh: Lập lịch báo cáo]\nTổng kết hàng ngày Báo cáo hàng tuần Phân tích hàng tháng Danh sách Xác minh Cost Explorer đã kích hoạt Báo cáo đã cấu hình Tài nguyên được theo dõi Bảng điều khiển đã tạo Cảnh báo đã thiết lập Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề chi phí phổ biến]\nVấn đề Thu thập Dữ liệu\nThiếu dữ liệu Cập nhật chậm Vấn đề tích hợp Vấn đề Phân tích\nLỗi tính toán Vấn đề thẻ Vấn đề phân loại Vấn đề Báo cáo\nVấn đề định dạng Lỗi phân phối Vấn đề truy cập Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất phân tích chi phí]\nQuản lý Chi phí\nGiám sát thường xuyên Phân loại rõ ràng Gắn thẻ phù hợp Tối ưu hóa Tài nguyên\nPhân tích sử dụng Định cỡ phù hợp Phân bổ chi phí Bước tiếp theo Sau khi phân tích chi phí, tiếp tục với Tối ưu Cấu hình\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/",
	"title": "Thiết Lập Môi Trường",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Module này hướng dẫn bạn thiết lập môi trường phát triển. Bạn có thể sử dụng website mẫu có sẵn hoặc triển khai website của riêng bạn để kiểm thử.\nNhững Gì Bạn Sẽ Học Tùy Chọn Thiết Lập Website\nTùy chọn A: Sử dụng website xem phim mẫu Tùy chọn B: Triển khai website của riêng bạn lên GitHub Cài Đặt Công Cụ Cần Thiết\nCài đặt và cấu hình AWS CLI Thiết lập công cụ phát triển Cài đặt SDK cần thiết Điều Kiện Tiên Quyết Trước khi bắt đầu module này, hãy đảm bảo bạn có:\nTài khoản AWS với quyền thích hợp Tài khoản GitHub Kiến thức cơ bản về Git và GitHub Quyền truy cập quản trị vào máy phát triển của bạn Ước Tính Thời Gian Tổng thời gian Module: ~30 phút Thời gian cho mỗi phần: 10-15 phút Cấu Trúc Module Thiết Lập Website\nSử dụng website xem phim mẫu HOẶC triển khai website của riêng bạn Cài Đặt Công Cụ Cần Thiết\nThiết lập môi trường phát triển Cài đặt công cụ AWS Kết Quả Mong Đợi Khi kết thúc module này, bạn sẽ có:\nMột repository website hoạt động trên GitHub Tất cả công cụ phát triển cần thiết được cài đặt AWS CLI được cấu hình và sẵn sàng sử dụng Hãy bắt đầu với Thiết Lập Website!\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.2-integrate-into-ci/",
	"title": "Tích hợp vào CI/CD",
	"tags": [],
	"description": "",
	"content": "Tích hợp Kiểm thử Hiệu năng vào CI/CD Cấu hình Pipeline Build [Chèn ảnh: Cấu hình CodeBuild]\nCập nhật BuildSpec\nversion: 0.2 phases: install: commands: - curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xvz - mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin build: commands: - k6 run performance-tests/load-test.js [Chèn ảnh: Cấu hình BuildSpec]\nThiết lập Môi trường [Chèn ảnh: Thiết lập môi trường]\nCấu hình tài nguyên Đặt biến Xác định giới hạn Triển khai Tự động hóa Kiểm thử [Chèn ảnh: Thiết lập tự động hóa kiểm thử]\nTạo Quy trình Kiểm thử\nĐiều kiện kích hoạt Trình tự kiểm thử Xử lý kết quả [Chèn ảnh: Cấu hình quy trình] Cấu hình Tài nguyên [Chèn ảnh: Cấu hình tài nguyên]\nYêu cầu tính toán Phân bổ bộ nhớ Cài đặt mạng Thiết lập Giám sát [Chèn ảnh: Thiết lập giám sát]\nCấu hình CloudWatch\nThu thập chỉ số Tạo bảng điều khiển Cấu hình cảnh báo [Chèn ảnh: Cài đặt CloudWatch] Thiết lập Thông báo [Chèn ảnh: Thiết lập thông báo]\nNgưỡng cảnh báo Kênh thông báo Hành động phản hồi Danh sách Xác minh Pipeline đã cấu hình Kiểm thử đã tự động hóa Tài nguyên đã phân bổ Giám sát đang hoạt động Thông báo hoạt động Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề tích hợp phổ biến]\nVấn đề Pipeline\nLỗi build Vấn đề tài nguyên Lỗi cấu hình Thực thi Kiểm thử\nVấn đề thời gian Hạn chế tài nguyên Vấn đề mạng Vấn đề Giám sát\nThu thập dữ liệu Kích hoạt cảnh báo Cập nhật bảng điều khiển Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất tích hợp]\nCấu hình Pipeline\nGiai đoạn rõ ràng Tài nguyên phù hợp Xử lý lỗi Quản lý Kiểm thử\nThực thi thường xuyên Theo dõi kết quả Giám sát hiệu năng Bước tiếp theo Sau khi tích hợp với CI/CD, tiếp tục với Xuất Kết quả\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.2-review-alerts/",
	"title": "Xem xét Cảnh báo",
	"tags": [],
	"description": "",
	"content": "Xem xét Cảnh báo Bảo mật Truy cập Cảnh báo Bảo mật [Chèn ảnh: Bảng điều khiển cảnh báo bảo mật]\nĐiều hướng đến Tab Bảo mật\nMở GitHub repository Đi đến tab Security Xem cảnh báo CodeQL [Chèn ảnh: Đường dẫn điều hướng] Lọc và Sắp xếp Cảnh báo [Chèn ảnh: Lọc cảnh báo]\nTheo mức độ nghiêm trọng Theo trạng thái Theo loại Phân tích Chi tiết Cảnh báo [Chèn ảnh: Phân tích cảnh báo]\nXem xét Thông tin Cảnh báo\nMô tả cảnh báo Mã bị ảnh hưởng Tác động tiềm ẩn [Chèn ảnh: Chi tiết cảnh báo] Điều tra Ngữ cảnh Mã [Chèn ảnh: Ngữ cảnh mã]\nVị trí nguồn Luồng dữ liệu Phân cấp gọi Ưu tiên Cảnh báo [Chèn ảnh: Ưu tiên cảnh báo]\nĐặt Mức Ưu tiên\nVấn đề nghiêm trọng Ưu tiên cao Ưu tiên trung bình Ưu tiên thấp [Chèn ảnh: Cài đặt ưu tiên] Tạo Kế hoạch Hành động [Chèn ảnh: Lập kế hoạch hành động]\nSửa chữa ngay lập tức Sửa chữa theo lịch Cải thiện dài hạn Theo dõi Trạng thái Cảnh báo [Chèn ảnh: Theo dõi cảnh báo]\nCập nhật Trạng thái Cảnh báo Mở Đang xử lý Đã giải quyết Cảnh báo sai [Chèn ảnh: Cập nhật trạng thái] Danh sách Xác minh Cảnh báo đã xem xét Ưu tiên đã đặt Hành động đã lên kế hoạch Trạng thái đã cập nhật Nhóm đã thông báo Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề cảnh báo phổ biến]\nVấn đề Truy cập\nVấn đề quyền Lỗi điều hướng Vấn đề hiển thị Thách thức Phân tích\nCảnh báo phức tạp Cảnh báo sai Thiếu ngữ cảnh Vấn đề Theo dõi\nCập nhật trạng thái Giám sát tiến độ Phối hợp nhóm Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất xem xét cảnh báo]\nQuy trình Xem xét\nLịch trình thường xuyên Sự tham gia của nhóm Tài liệu rõ ràng Quản lý Ưu tiên\nĐánh giá rủi ro Phân bổ tài nguyên Lập kế hoạch thời gian Bước tiếp theo Sau khi xem xét cảnh báo, tiếp tục với Sửa Lỗ hổng\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/",
	"title": "Framework Testing Tự Động",
	"tags": [],
	"description": "",
	"content": "Trong module này, chúng ta sẽ xây dựng một framework testing tự động cho website xem phim bằng cách sử dụng AWS CodeBuild và các công cụ testing hiện đại.\n🎯 Mục tiêu Thiết lập môi trường testing tự động với AWS CodeBuild Viết và chạy unit test cho các component Tạo báo cáo test chi tiết và dễ đọc Tự động hóa quy trình testing khi có code mới 📋 Nội dung chính Viết Unit Test Đầu Tiên\nTạo test file đơn giản Cấu trúc test cơ bản Giả lập test delay Cấu Hình Buildspec\nTạo file buildspec.yml Cài đặt công cụ báo cáo Cấu hình output artifacts Thiết Lập CodeBuild\nTạo project CodeBuild Kết nối với GitHub Cấu hình môi trường build Kiểm Tra Kết Quả\nChạy và xem kết quả build Phân tích báo cáo test Xử lý lỗi (nếu có) ⚙️ Kiến thức cần có Hiểu biết cơ bản về testing trong .NET Đã cài đặt và cấu hình AWS CLI Có tài khoản GitHub với repository ⏱ Thời gian ước tính Tổng thời gian: ~2 giờ Mỗi phần: 25-30 phút 📌 Kết quả mong đợi Sau khi hoàn thành module này, bạn sẽ có:\nFramework Testing Hoàn Chỉnh\nUnit test tự động chạy Báo cáo test chi tiết Tích hợp với GitHub Quy Trình CI/CD\nTự động test khi push code Lưu trữ kết quả test Thông báo khi có lỗi Tài Liệu \u0026amp; Báo Cáo\nHTML test report Log build chi tiết Thống kê test coverage 🛠 Công cụ sử dụng AWS CodeBuild: Dịch vụ CI/CD tự động xUnit: Framework testing cho .NET ReportGenerator: Tạo báo cáo HTML GitHub: Quản lý source code 💡 Mẹo Đọc kỹ phần cấu hình buildspec.yml Test local trước khi push Kiểm tra log khi có lỗi Tổ chức test theo cấu trúc rõ ràng 🔍 Xử lý sự cố Kiểm tra quyền truy cập AWS Verify cấu hình GitHub Xem log build chi tiết Chạy test local để debug Hãy đảm bảo hoàn thành từng bước trước khi chuyển sang bước tiếp theo\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.3-fix-vulnerabilities/",
	"title": "Sửa Lỗ hổng",
	"tags": [],
	"description": "",
	"content": "Sửa Lỗ hổng Bảo mật Chuẩn bị Môi trường Sửa lỗi [Chèn ảnh: Thiết lập môi trường sửa lỗi]\nTạo Nhánh Sửa lỗi\ngit checkout -b security-fix/issue-123 [Chèn ảnh: Tạo nhánh]\nThiết lập Môi trường Phát triển [Chèn ảnh: Thiết lập phát triển]\nCấu hình IDE Cài đặt công cụ bảo mật Thiết lập môi trường kiểm thử Triển khai Sửa lỗi Bảo mật [Chèn ảnh: Triển khai sửa lỗi]\nSửa Lỗ hổng Phổ biến\n// Trước: Lỗ hổng SQL Injection var query = $\u0026#34;SELECT * FROM Users WHERE Id = {userId}\u0026#34;; // Sau: Truy vấn có tham số var query = \u0026#34;SELECT * FROM Users WHERE Id = @UserId\u0026#34;; command.Parameters.AddWithValue(\u0026#34;@UserId\u0026#34;, userId); [Chèn ảnh: Thay đổi mã]\nÁp dụng Thực hành Bảo mật Tốt nhất [Chèn ảnh: Thực hành bảo mật]\nXác thực đầu vào Mã hóa đầu ra Cấu hình an toàn Xử lý lỗi Kiểm thử Sửa lỗi Bảo mật [Chèn ảnh: Kiểm thử bảo mật]\nChạy Kiểm thử Bảo mật\nKiểm thử đơn vị Kiểm thử tích hợp Quét bảo mật [Chèn ảnh: Thực thi kiểm thử] Xác minh Sửa lỗi [Chèn ảnh: Xác minh sửa lỗi]\nKiểm tra kết quả CodeQL Chạy kiểm thử thâm nhập Xác thực kiểm soát bảo mật Gửi và Xem xét Thay đổi [Chèn ảnh: Gửi thay đổi]\nTạo Pull Request Mô tả chi tiết Tác động bảo mật Kết quả kiểm thử [Chèn ảnh: Tạo PR] Danh sách Xác minh Nhánh sửa lỗi đã tạo Sửa lỗi bảo mật đã triển khai Kiểm thử đã pass CodeQL sạch PR đã gửi Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề sửa lỗi phổ biến]\nVấn đề Triển khai\nXung đột mã Lỗi kiểm thử Vấn đề tích hợp Quan ngại Bảo mật\nSửa lỗi không hoàn chỉnh Lỗ hổng mới Tác dụng phụ Vấn đề Xem xét\nThiếu tài liệu Thiếu kiểm thử Thay đổi không rõ ràng Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất sửa lỗi bảo mật]\nTriển khai Sửa lỗi\nGiải pháp hoàn chỉnh Kiểm thử kỹ lưỡng Tài liệu rõ ràng Xem xét Mã\nTập trung bảo mật Kiểm thử toàn diện Phòng ngừa tương lai Bước tiếp theo Sau khi sửa lỗ hổng, tiếp tục với Cấu hình Cài đặt\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.3-codebuild-project/",
	"title": "Thiết lập CodeBuild để chạy Unit Test",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo một project CodeBuild để chạy tự động unit test từ mã nguồn trong GitHub, sử dụng file buildspec.yml đã cấu hình ở bước trước.\n🎯 Mục tiêu Tạo project trong AWS CodeBuild Kết nối GitHub với AWS (OAuth hoặc PAT) Cấu hình môi trường chạy build Chạy buildspec.yml đã thiết lập từ repo (Tuỳ chọn) Lưu báo cáo test lên Amazon S3 🔧 Các bước thực hiện 1️⃣ Truy cập AWS CodeBuild Mở trang: https://console.aws.amazon.com/codebuild/home Nhấn Create build project 2️⃣ Nhập thông tin Project Project name: ci-dotnet-unittest Description: Chạy unit test và sinh báo cáo HTML 3️⃣ Cấu hình nguồn (Source) Trong phần Source, chọn Source provider là GitHub (Version 2) và chọn Manage account credentials nếu bạn chưa kết nối GitHub. Nhấn create a new GitHub connection để bắt đầu tạo kết nối Một cửa sổ mới sẽ mở ra. Nhập tên cho connection: Chọn Install a new app để kết nối tới GitHub của bạn Nhập mật khẩu GitHub để kết nối Sau khi kết nối thành công, bạn sẽ thấy thông báo xác nhận Quay lại trang Manage default source credential, chọn connection vừa tạo Quay lại trang CodeBuild, chọn repository vừa kết nối và chọn branch chính của dự án (thường là main hoặc master) Trong phần Primary source webhook events, chọn ✅ Tick vào \u0026ldquo;Rebuild every time a code change is pushed to this repository\u0026rdquo; 4️⃣ Thiết lập môi trường build Provisioning model: On-demand Environment image: Managed image Compute: EC2 Running mode: Container Operating System: Amazon Linux Runtime: Standard Image: aws/codebuild/amazonlinux-x86_64-standard:5.0 5️⃣ Buildspec file Buildspec: chọn Use a buildspec file Đảm bảo repo của bạn có file buildspec.yml ở thư mục gốc 6️⃣ (Tuỳ chọn) Artifact để lưu báo cáo Nếu bạn muốn lưu báo cáo test HTML: Artifacts type: Amazon S3 S3 bucket: chọn bucket đã tạo trước 7️⃣ Tạo project Nhấn Create build project Sau khi tạo xong: Có thể chọn Start build để chạy thử Hoặc push code lên GitHub để webhook tự động chạy 🧠 Mẹo thêm Nếu repo chưa có buildspec.yml, bạn có thể dùng tuỳ chọn \u0026ldquo;Insert build commands\u0026rdquo; để viết trực tiếp, nhưng không khuyến khích. Sau khi tạo project, AWS sẽ tự chạy test mỗi lần bạn nhấn \u0026ldquo;Start build\u0026rdquo; hoặc khi có push (nếu bật webhook). Với GitHub version 2, bạn có thể chọn repo từ dropdown. Nếu dùng PAT thì cần dán token thủ công. "
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.3-optimize-config/",
	"title": "Tối ưu Cấu hình",
	"tags": [],
	"description": "",
	"content": "Tối ưu hóa Cấu hình Cơ sở Hạ tầng Phân tích Cấu hình Hiện tại [Chèn ảnh: Phân tích cấu hình]\nXem xét Cài đặt Tài nguyên\nLoại instance Cấu hình lưu trữ Cài đặt mạng [Chèn ảnh: Cài đặt tài nguyên] Xác định Cơ hội Tối ưu hóa\n# optimization_analyzer.py def analyze_optimization(): return { \u0026#39;compute\u0026#39;: analyze_compute_usage(), \u0026#39;storage\u0026#39;: analyze_storage_usage(), \u0026#39;network\u0026#39;: analyze_network_usage(), \u0026#39;recommendations\u0026#39;: generate_recommendations() } [Chèn ảnh: Phân tích tối ưu hóa]\nTriển khai Tối ưu hóa Chi phí [Chèn ảnh: Triển khai tối ưu hóa]\nCấu hình Mở rộng Tài nguyên\nQuy tắc tự động mở rộng Mở rộng theo lịch Điều chỉnh theo tải [Chèn ảnh: Cấu hình mở rộng] Tối ưu hóa Sử dụng Lưu trữ [Chèn ảnh: Tối ưu hóa lưu trữ]\nLựa chọn lớp lưu trữ Chính sách vòng đời Quy tắc lưu giữ Thiết lập Kiểm soát Chi phí [Chèn ảnh: Thiết lập kiểm soát chi phí]\nCấu hình Ngân sách\nNgân sách dịch vụ Ngân sách dự án Ngưỡng cảnh báo [Chèn ảnh: Cấu hình ngân sách] Triển khai Phân bổ Chi phí [Chèn ảnh: Phân bổ chi phí]\nPhân bổ dựa trên thẻ Theo dõi theo dịch vụ Quy kết dự án Danh sách Xác minh Cấu hình đã xem xét Tối ưu hóa đã triển khai Kiểm soát chi phí đã thiết lập Ngân sách đã cấu hình Giám sát đang hoạt động Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề tối ưu hóa phổ biến]\nVấn đề Cấu hình\nVấn đề mở rộng Xung đột tài nguyên Lỗi quyền Tác động Hiệu năng\nSuy giảm dịch vụ Vấn đề dung lượng Thời gian phản hồi Vấn đề Kiểm soát Chi phí\nVượt ngân sách Lỗi phân bổ Vấn đề theo dõi Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất tối ưu hóa]\nQuản lý Tài nguyên\nXem xét thường xuyên Giám sát hiệu năng Theo dõi chi phí Kiểm soát Cấu hình\nQuản lý thay đổi Tài liệu hóa Kiểm soát phiên bản Bước tiếp theo Sau khi tối ưu hóa cấu hình, tiếp tục với Ước tính Sử dụng\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.3-aggregate-results/",
	"title": "Tổng hợp Kết quả",
	"tags": [],
	"description": "",
	"content": "Tổng hợp Kết quả Kiểm thử Song song Cấu hình Thu thập Kết quả [Chèn ảnh: Thiết lập thu thập kết quả]\nThiết lập Thư mục Kết quả\nTạo vị trí trung tâm Cấu hình quyền Thiết lập cấu trúc [Chèn ảnh: Cấu trúc thư mục] Cấu hình Định dạng Kết quả [Chèn ảnh: Cài đặt định dạng kết quả]\nXác định định dạng đầu ra Thiết lập mẫu Cấu hình metadata Triển khai Tổng hợp Kết quả [Chèn ảnh: Triển khai tổng hợp]\nTạo Script Tổng hợp\n# Ví dụ đơn giản về tổng hợp kết quả def aggregate_results(result_files): total_results = { \u0026#39;passed\u0026#39;: 0, \u0026#39;failed\u0026#39;: 0, \u0026#39;duration\u0026#39;: 0 } for file in result_files: results = parse_results(file) update_totals(total_results, results) return total_results [Chèn ảnh: Thực thi script]\nCấu hình Tạo Báo cáo [Chèn ảnh: Cấu hình báo cáo]\nXác định định dạng báo cáo Thiết lập mẫu Cấu hình phân phối Thiết lập Bảng điều khiển Kết quả [Chèn ảnh: Thiết lập bảng điều khiển]\nTạo Bảng điều khiển\nCấu hình chỉ số Thiết lập trực quan hóa Xác định bố cục [Chèn ảnh: Bố cục bảng điều khiển] Cấu hình Cảnh báo [Chèn ảnh: Cấu hình cảnh báo]\nĐặt ngưỡng Cấu hình thông báo Xác định hành động Danh sách Xác minh Thu thập kết quả hoạt động Script tổng hợp đang chạy Báo cáo đang tạo Bảng điều khiển có thể truy cập Cảnh báo đã cấu hình Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề tổng hợp phổ biến]\nVấn đề Thu thập\nThiếu kết quả Vấn đề quyền Vấn đề đường dẫn Vấn đề Tổng hợp\nLỗi định dạng Lỗi xử lý Vấn đề bộ nhớ Vấn đề Báo cáo\nVấn đề mẫu Lỗi tạo Lỗi phân phối Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất quản lý kết quả]\nQuản lý Dữ liệu\nDọn dẹp thường xuyên Lưu trữ phù hợp Kiểm soát phiên bản Tổ chức Báo cáo\nCấu trúc rõ ràng Định dạng nhất quán Điều hướng dễ dàng Bước tiếp theo Sau khi thiết lập tổng hợp kết quả, tiếp tục với So sánh Tốc độ\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.3-export-results/",
	"title": "Xuất Kết quả",
	"tags": [],
	"description": "",
	"content": "Xuất Kết quả Kiểm thử Hiệu năng Cấu hình Xuất Kết quả [Chèn ảnh: Cấu hình xuất kết quả]\nThiết lập Định dạng Xuất\n// Cấu hình xuất k6 export const options = { ext: { loadimpact: { projectID: 123456, }, }, outputFields: { metrics: [\u0026#39;http_req_duration\u0026#39;, \u0026#39;http_reqs\u0026#39;, \u0026#39;vus\u0026#39;], trend: [\u0026#39;p95\u0026#39;, \u0026#39;avg\u0026#39;, \u0026#39;med\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;max\u0026#39;], }, }; [Chèn ảnh: Cấu hình xuất]\nCấu hình Vị trí Lưu trữ [Chèn ảnh: Thiết lập lưu trữ]\nCấu hình bucket S3 Tổ chức file Chính sách lưu giữ Triển khai Xử lý Dữ liệu [Chèn ảnh: Thiết lập xử lý dữ liệu]\nTạo Script Xử lý\nPhân tích kết quả kiểm thử Tính toán chỉ số Tạo tổng hợp [Chèn ảnh: Triển khai xử lý] Thiết lập Pipeline Dữ liệu [Chèn ảnh: Pipeline dữ liệu]\nLuồng dữ liệu Bước chuyển đổi Định dạng đầu ra Tạo Báo cáo [Chèn ảnh: Tạo báo cáo]\nCấu hình Mẫu\nChỉ số hiệu năng Phân tích xu hướng Góc nhìn so sánh [Chèn ảnh: Mẫu báo cáo] Thiết lập Phân phối [Chèn ảnh: Phân phối báo cáo]\nGửi email Cập nhật bảng điều khiển Hệ thống thông báo Danh sách Xác minh Xuất đã cấu hình Xử lý hoạt động Báo cáo đang tạo Phân phối hoạt động Lưu trữ có tổ chức Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề xuất phổ biến]\nVấn đề Xuất\nLỗi định dạng Vấn đề lưu trữ Vấn đề quyền Vấn đề Xử lý\nHỏng dữ liệu Lỗi tính toán Giới hạn tài nguyên Vấn đề Báo cáo\nLỗi mẫu Lỗi phân phối Vấn đề truy cập Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất xuất]\nQuản lý Dữ liệu\nTổ chức rõ ràng Dọn dẹp thường xuyên Sao lưu phù hợp Thiết kế Báo cáo\nTrình bày rõ ràng Chỉ số chính Thông tin có thể hành động Bước tiếp theo Sau khi thiết lập xuất kết quả, tiếp tục với Phân tích Hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/2.3-create-s3/",
	"title": "2.3 - Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "🪣 Tạo S3 Bucket Trong phần này, bạn sẽ tạo một S3 bucket để lưu trữ báo cáo test từ AWS CodeBuild.\n🔧 Các bước thực hiện 1️⃣ Truy cập Amazon S3 Đăng nhập vào AWS Console Tìm và chọn dịch vụ S3 2️⃣ Tạo Bucket Nhấn nút Create bucket Nhập tên bucket: dotnet-unit-test-report Giữ các cài đặt khác ở mặc định Nhấn Create bucket 3️⃣ Xác nhận Bucket mới sẽ xuất hiện trong danh sách Trạng thái bucket là \u0026ldquo;Created\u0026rdquo; 📝 Ghi chú Bucket này sẽ được sử dụng để lưu báo cáo test từ CodeBuild Tên bucket phải là duy nhất trên toàn cầu Các cài đặt mặc định đã đủ cho mục đích của workshop "
},
{
	"uri": "//localhost:1313/vi/6-security-testing/6.4-disable-if-needed/",
	"title": "Cấu hình Cài đặt",
	"tags": [],
	"description": "",
	"content": "Cấu hình Cài đặt Bảo mật Cấu hình Cài đặt CodeQL [Chèn ảnh: Cấu hình CodeQL]\nCập nhật Cấu hình Phân tích\nname: \u0026#34;Cấu hình CodeQL\u0026#34; queries: - uses: security-extended - uses: security-and-quality paths-ignore: - \u0026#39;**/test/**\u0026#39; - \u0026#39;**/generated/**\u0026#39; [Chèn ảnh: File cấu hình]\nThiết lập Bộ Truy vấn [Chèn ảnh: Thiết lập bộ truy vấn]\nChọn loại truy vấn Cấu hình mức độ nghiêm trọng Đặt phạm vi phân tích Cấu hình Cài đặt Cảnh báo [Chèn ảnh: Cấu hình cảnh báo]\nĐặt Quy tắc Cảnh báo\nNgưỡng mức độ nghiêm trọng Quy tắc thông báo Hành động phản hồi [Chèn ảnh: Quy tắc cảnh báo] Cấu hình Thông báo [Chèn ảnh: Thiết lập thông báo]\nThông báo email Cảnh báo tích hợp Thông báo nhóm Quản lý Kiểm soát Bảo mật [Chèn ảnh: Kiểm soát bảo mật]\nKiểm soát Truy cập\nQuyền repository Truy cập phân tích Truy cập báo cáo [Chèn ảnh: Cài đặt truy cập] Cấu hình Chính sách [Chèn ảnh: Thiết lập chính sách]\nChính sách bảo mật Quy tắc thực thi Cài đặt tuân thủ Danh sách Xác minh CodeQL đã cấu hình Cảnh báo đã thiết lập Thông báo hoạt động Kiểm soát truy cập đã xác minh Chính sách đã triển khai Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề cấu hình phổ biến]\nVấn đề Cấu hình\nLỗi cú pháp Vấn đề quyền Lỗi tích hợp Vấn đề Cảnh báo\nThiếu thông báo Cảnh báo sai Quá tải cảnh báo Vấn đề Truy cập\nTừ chối quyền Lỗi xác thực Vấn đề tích hợp Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất cấu hình]\nCài đặt Bảo mật\nXem xét thường xuyên Tài liệu rõ ràng Giao tiếp nhóm Quản lý Cảnh báo\nMức độ ưu tiên Quy trình phản hồi Bảo trì thường xuyên Bước tiếp theo Sau khi cấu hình cài đặt bảo mật, tiếp tục với Giám sát Chi phí\n"
},
{
	"uri": "//localhost:1313/vi/3-automated-unit-test/3.4-verify-results/",
	"title": "Kiểm tra kết quả Test tự động khi Push code",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ thực hiện push code lên GitHub và xem kết quả test tự động từ AWS CodeBuild.\n🎯 Mục tiêu Push code lên GitHub repository Xem CodeBuild tự động chạy test Kiểm tra kết quả và báo cáo test 🔧 Các bước thực hiện 1️⃣ Push code lên GitHub git add . git commit -m \u0026#34;Test trigger CodeBuild from GitHub\u0026#34; git push origin main 2️⃣ Theo dõi Build tự động Vào AWS CodeBuild console Chọn project ci-dotnet-unittest Quan sát build mới tự động được tạo 3️⃣ Xem chi tiết quá trình Build Trong tab Build details, bạn có thể theo dõi:\nPhase details: Các bước đang chạy Build logs: Log chi tiết của quá trình test Environment variables: Biến môi trường được sử dụng 4️⃣ Kiểm tra kết quả Test trong CloudWatch Vào CloudWatch Logs Tìm Log group của CodeBuild Xem chi tiết log của build vừa chạy Trong log, tìm đoạn:\nRunning tests... Passed! - Failed: 0, Passed: 2, Skipped: 0 Test Run Successful. 5️⃣ Xem báo cáo Test trong S3 Vào S3 bucket đã cấu hình Tìm thư mục TestReport Tải về và mở file index.html 💡 Mẹo Theo dõi build status:\nBookmark trang build history Bật thông báo email Cài đặt AWS CLI để check status Debug hiệu quả:\n# Xem log của build gần nhất aws codebuild batch-get-builds --ids \u0026lt;build-id\u0026gt; Tối ưu thời gian:\nPush code có ý nghĩa Chạy test local trước Kiểm tra buildspec syntax 📝 Ghi chú Build tự động chỉ chạy khi push vào branch được cấu hình Mỗi push sẽ tạo một build mới Log được lưu trong CloudWatch Báo cáo HTML được cập nhật sau mỗi lần build Luôn kiểm tra status của build trước khi rời khỏi máy tính\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/5.4-analyze-performance/",
	"title": "Phân tích Hiệu năng",
	"tags": [],
	"description": "",
	"content": "Phân tích Kết quả Kiểm thử Hiệu năng Thiết lập Công cụ Phân tích [Chèn ảnh: Thiết lập công cụ phân tích]\nCấu hình Môi trường Phân tích\nCài đặt công cụ cần thiết Thiết lập dependencies Cấu hình không gian làm việc [Chèn ảnh: Cấu hình môi trường] Nhập Dữ liệu Kiểm thử [Chèn ảnh: Quy trình nhập dữ liệu]\nimport pandas as pd import numpy as np def load_test_data(file_path): data = pd.read_json(file_path) return process_test_data(data) Thực hiện Phân tích Dữ liệu [Chèn ảnh: Quy trình phân tích]\nTính toán Chỉ số Chính\nThời gian phản hồi Tỷ lệ lỗi Thông lượng [Chèn ảnh: Tính toán chỉ số] Tạo Trực quan hóa [Chèn ảnh: Trực quan hóa dữ liệu]\nXu hướng hiệu năng Mẫu tải Phân bố lỗi Tạo Báo cáo Phân tích [Chèn ảnh: Tạo báo cáo]\nCấu hình Mẫu Báo cáo\nTổng quan hiệu năng Phân tích chi tiết Đề xuất [Chèn ảnh: Mẫu báo cáo] Thiết lập Phân tích Tự động [Chèn ảnh: Thiết lập tự động hóa]\nPhân tích theo lịch Ngưỡng cảnh báo Phát hiện xu hướng Danh sách Xác minh Công cụ phân tích hoạt động Xử lý dữ liệu chính xác Trực quan hóa rõ ràng Báo cáo đang tạo Tự động hóa đang chạy Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề phân tích phổ biến]\nVấn đề Dữ liệu\nThiếu dữ liệu Định dạng không hợp lệ Lỗi xử lý Vấn đề Phân tích\nLỗi tính toán Vấn đề bộ nhớ Điểm nghẽn hiệu năng Vấn đề Báo cáo\nVấn đề định dạng Lỗi tạo Lỗi phân phối Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất phân tích]\nQuản lý Dữ liệu\nXác thực thường xuyên Xử lý sạch Tài liệu rõ ràng Quy trình Phân tích\nPhương pháp chuẩn Chỉ số nhất quán Xem xét thường xuyên Bước tiếp theo Sau khi phân tích hiệu năng, tiếp tục với Kiểm thử Bảo mật\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/4.4-compare-speed/",
	"title": "So sánh Tốc độ",
	"tags": [],
	"description": "",
	"content": "So sánh Tốc độ Thực thi Thiết lập Đo lường Hiệu năng [Chèn ảnh: Thiết lập đo lường hiệu năng]\nCấu hình Thu thập Chỉ số\nThời gian thực thi Sử dụng tài nguyên Thông lượng kiểm thử [Chèn ảnh: Cấu hình chỉ số] Tạo Đo lường Cơ sở [Chèn ảnh: Kiểm thử cơ sở]\nThực thi tuần tự Hiệu năng đơn luồng Sử dụng tài nguyên Triển khai Công cụ So sánh [Chèn ảnh: Thiết lập công cụ so sánh]\nTạo Script So sánh\n# So sánh hiệu năng đơn giản def compare_execution_speeds(sequential_data, parallel_data): comparison = { \u0026#39;time_difference\u0026#39;: parallel_data[\u0026#39;duration\u0026#39;] - sequential_data[\u0026#39;duration\u0026#39;], \u0026#39;speedup_factor\u0026#39;: sequential_data[\u0026#39;duration\u0026#39;] / parallel_data[\u0026#39;duration\u0026#39;], \u0026#39;resource_efficiency\u0026#39;: calculate_efficiency(sequential_data, parallel_data) } return comparison [Chèn ảnh: Thực thi script]\nTạo Báo cáo So sánh [Chèn ảnh: Tạo báo cáo]\nChỉ số hiệu năng So sánh trực quan Phân tích xu hướng Tạo Bảng điều khiển Hiệu năng [Chèn ảnh: Bảng điều khiển hiệu năng]\nCấu hình Trực quan hóa\nThời gian thực thi Sử dụng tài nguyên Chỉ số hiệu quả [Chèn ảnh: Bố cục bảng điều khiển] Thiết lập Giám sát [Chèn ảnh: Thiết lập giám sát]\nChỉ số thời gian thực Xu hướng lịch sử Ngưỡng cảnh báo Danh sách Xác minh Thu thập chỉ số hoạt động Công cụ so sánh đang chạy Báo cáo đang tạo Bảng điều khiển có thể truy cập Giám sát đang hoạt động Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề hiệu năng phổ biến]\nVấn đề Đo lường\nĐộ chính xác thời gian Thu thập dữ liệu Độ tin cậy chỉ số Vấn đề So sánh\nKhông nhất quán dữ liệu Lỗi phân tích Vấn đề báo cáo Thách thức Giám sát\nKhoảng trống dữ liệu Độ chính xác cảnh báo Chi phí tài nguyên Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất so sánh hiệu năng]\nThu thập Dữ liệu\nPhương pháp nhất quán Lấy mẫu thường xuyên Dữ liệu sạch Quy trình Phân tích\nChỉ số chuẩn So sánh rõ ràng Phương pháp có tài liệu Bước tiếp theo Sau khi so sánh tốc độ thực thi, tiếp tục với Kiểm thử Hiệu năng\n"
},
{
	"uri": "//localhost:1313/vi/4-parallel-execution/",
	"title": "Thực thi Song song",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Thực thi Kiểm thử Song song Module này tập trung vào việc triển khai thực thi kiểm thử song song trong AWS CodeBuild để tối ưu hóa thời gian chạy kiểm thử và cải thiện hiệu quả pipeline. Bạn sẽ học cách cấu hình, quản lý và giám sát việc thực thi kiểm thử song song trong pipeline CI/CD.\nNhững gì Bạn sẽ Học Cấu hình Nhiều Kiểm thử\nTổ chức các dự án kiểm thử Phân loại kiểm thử Ưu tiên kiểm thử Lập kế hoạch tài nguyên Cấu hình Song song\nThiết lập song song CodeBuild Cấu hình trình chạy kiểm thử Phân bổ tài nguyên Cô lập môi trường Tổng hợp Kết quả\nKết hợp kết quả kiểm thử Chiến lược báo cáo Xử lý lỗi Hợp nhất trạng thái So sánh Hiệu năng\nĐo lường cải thiện Phân tích điểm nghẽn Tối ưu hóa thực thi Sử dụng tài nguyên Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 3 (Kiểm thử Đơn vị Tự động) Hiểu biết về AWS CodeBuild Quen thuộc với các khái niệm thực thi kiểm thử Kiến thức cơ bản về xử lý song song Ước tính Thời gian Tổng thời gian Module: ~2 giờ Thời gian mỗi Phần: 30 phút Cấu trúc Module Thiết lập Nhiều Kiểm thử\nTổ chức kiểm thử Thiết lập cấu hình Cấu hình Thực thi Song song\nThiết lập xử lý song song Quản lý tài nguyên Tổng hợp Kết quả\nKết hợp kết quả Tạo báo cáo So sánh Tốc độ\nPhân tích hiệu năng Kỹ thuật tối ưu hóa Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nCấu hình thực thi kiểm thử song song Cải thiện tốc độ thực thi kiểm thử Triển khai tổng hợp kết quả Tối ưu hóa sử dụng tài nguyên Đo lường cải thiện hiệu năng Hãy bắt đầu với Thiết lập Nhiều Kiểm thử!\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/7.4-estimate-usage/",
	"title": "Ước tính Sử dụng",
	"tags": [],
	"description": "",
	"content": "Ước tính Sử dụng Tài nguyên Phân tích Sử dụng Lịch sử [Chèn ảnh: Phân tích sử dụng]\nThu thập Dữ liệu Sử dụng\n# usage_analyzer.py def analyze_historical_usage(): return { \u0026#39;compute\u0026#39;: get_compute_metrics(), \u0026#39;storage\u0026#39;: get_storage_metrics(), \u0026#39;network\u0026#39;: get_network_metrics(), \u0026#39;patterns\u0026#39;: identify_patterns() } [Chèn ảnh: Thu thập dữ liệu]\nXác định Mẫu Sử dụng [Chèn ảnh: Phân tích mẫu]\nThời điểm sử dụng cao điểm Biến động theo mùa Xu hướng tăng trưởng Tạo Dự báo Sử dụng [Chèn ảnh: Tạo dự báo]\nTạo Dự đoán\nDự báo ngắn hạn Dự báo trung hạn Ước tính dài hạn [Chèn ảnh: Mô hình dự đoán] Tính toán Yêu cầu Tài nguyên [Chèn ảnh: Tính toán tài nguyên]\nNhu cầu tính toán Yêu cầu lưu trữ Dung lượng mạng Lập kế hoạch Phân bổ Tài nguyên [Chèn ảnh: Lập kế hoạch tài nguyên]\nTạo Kế hoạch Năng lực\nMở rộng tài nguyên Đáp ứng tăng trưởng Phân bổ dự phòng [Chèn ảnh: Lập kế hoạch năng lực] Thiết lập Theo dõi Tài nguyên [Chèn ảnh: Theo dõi tài nguyên]\nGiám sát sử dụng Cảnh báo ngưỡng Phân tích xu hướng Danh sách Xác minh Dữ liệu lịch sử đã phân tích Mẫu đã xác định Dự báo đã tạo Tài nguyên đã lập kế hoạch Giám sát đã cấu hình Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề ước tính phổ biến]\nVấn đề Dữ liệu\nDữ liệu không đầy đủ Chỉ số không nhất quán Lỗi phân tích Vấn đề Dự báo\nVấn đề độ chính xác Nhận dạng mẫu Điều chỉnh theo mùa Thách thức Lập kế hoạch\nPhân bổ tài nguyên Lập kế hoạch năng lực Ước tính tăng trưởng Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất ước tính]\nQuản lý Dữ liệu\nThu thập thường xuyên Xác thực dữ liệu Phân tích mẫu Độ chính xác Dự báo\nNhiều mô hình Cập nhật thường xuyên Kiểm tra xác thực Bước tiếp theo Sau khi ước tính sử dụng, tiếp tục với Dọn dẹp\n"
},
{
	"uri": "//localhost:1313/vi/5-performance-testing/",
	"title": "Kiểm thử Hiệu năng",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Kiểm thử Hiệu năng Module này tập trung vào việc triển khai kiểm thử hiệu năng trong pipeline CI/CD sử dụng AWS CodeBuild. Bạn sẽ học cách viết, thực thi và phân tích các kiểm thử hiệu năng để đảm bảo ứng dụng của bạn đáp ứng các yêu cầu về hiệu năng.\nNhững gì Bạn sẽ Học Viết Kiểm thử Hiệu năng\nThiết kế kịch bản kiểm thử Triển khai kiểm thử tải Tạo kiểm thử áp lực Chỉ số hiệu năng Tích hợp CI/CD\nCấu hình pipeline Tự động hóa kiểm thử Quản lý tài nguyên Thiết lập môi trường Xuất Kết quả\nThu thập dữ liệu Tổng hợp chỉ số Tạo báo cáo Phân tích xu hướng Phân tích Hiệu năng\nDiễn giải chỉ số Xác định điểm nghẽn Chiến lược tối ưu hóa Đề xuất cải thiện Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 4 (Thực thi Song song) Hiểu biết về khái niệm hiệu năng Quen thuộc với công cụ kiểm thử k6 Kiến thức cơ bản về phân tích chỉ số Ước tính Thời gian Tổng thời gian Module: ~3 giờ Thời gian mỗi Phần: 45 phút Cấu trúc Module Viết Kiểm thử Hiệu năng\nTạo kịch bản kiểm thử Thiết lập chỉ số hiệu năng Tích hợp vào CI/CD\nTích hợp pipeline Thiết lập tự động hóa Xuất Kết quả\nThu thập dữ liệu Tạo báo cáo Phân tích Hiệu năng\nKỹ thuật phân tích Chiến lược tối ưu hóa Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nTạo các kiểm thử hiệu năng toàn diện Tích hợp kiểm thử vào pipeline CI/CD Triển khai thu thập kết quả Phân tích chỉ số hiệu năng Xác định cơ hội tối ưu hóa Hãy bắt đầu với Viết Kiểm thử Hiệu năng!\n"
},
{
	"uri": "//localhost:1313/vi/6-security-testing/",
	"title": "Kiểm thử Bảo mật",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Kiểm thử Bảo mật Module này tập trung vào việc triển khai kiểm thử bảo mật trong pipeline CI/CD sử dụng AWS CodeBuild và CodeQL. Bạn sẽ học cách xác định lỗ hổng bảo mật, phân tích mã nguồn để tìm các vấn đề bảo mật tiềm ẩn và triển khai các thực hành bảo mật tốt nhất.\nNhững gì Bạn sẽ Học Kích hoạt Phân tích CodeQL\nThiết lập cấu hình Hỗ trợ ngôn ngữ Lựa chọn truy vấn Thiết lập tích hợp Xem xét Cảnh báo Bảo mật\nPhân tích cảnh báo Mức độ nghiêm trọng Xử lý cảnh báo sai Ưu tiên xử lý Sửa Vấn đề Bảo mật\nKhắc phục lỗ hổng Cải thiện mã nguồn Mẫu bảo mật Thực hành tốt nhất Cấu hình Cài đặt Bảo mật\nCấu hình cảnh báo Lập lịch quét Kiểm soát truy cập Thiết lập báo cáo Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 5 (Kiểm thử Hiệu năng) Hiểu biết về khái niệm bảo mật Quyền truy cập GitHub repository Cấu hình AWS CodeBuild Ước tính Thời gian Tổng thời gian Module: ~2.5 giờ Thời gian mỗi Phần: 35-40 phút Cấu trúc Module Kích hoạt CodeQL\nThiết lập cấu hình Thiết lập tích hợp Xem xét Cảnh báo\nPhân tích cảnh báo Ưu tiên vấn đề Sửa Lỗ hổng\nKhắc phục vấn đề Cải thiện bảo mật Cấu hình Cài đặt\nCấu hình bảo mật Quản lý quét Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nCấu hình phân tích CodeQL Triển khai quét bảo mật Xem xét cảnh báo bảo mật Sửa lỗ hổng bảo mật Quản lý cài đặt bảo mật Hãy bắt đầu với Kích hoạt CodeQL!\n"
},
{
	"uri": "//localhost:1313/vi/7-monitoring-cost/",
	"title": "Giám sát Chi phí",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Giám sát Chi phí Module này tập trung vào việc giám sát và tối ưu hóa chi phí liên quan đến cơ sở hạ tầng kiểm thử tự động trên AWS. Bạn sẽ học cách theo dõi việc sử dụng tài nguyên, phân tích chi phí và triển khai các chiến lược tối ưu hóa chi phí.\nNhững gì Bạn sẽ Học CloudWatch Logs\nCấu hình log Phân tích log Trích xuất chỉ số Thiết lập cảnh báo Phân tích Chi phí\nTheo dõi tài nguyên Mẫu sử dụng Phân tích chi phí Phân tích xu hướng Tối ưu hóa Cấu hình\nĐịnh cỡ tài nguyên Lập lịch Tự động hóa Giảm chi phí Ước tính Sử dụng\nLập kế hoạch năng lực Dự báo tăng trưởng Lập kế hoạch ngân sách Dự báo tài nguyên Yêu cầu Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:\nHoàn thành Module 6 (Kiểm thử Bảo mật) Hiểu biết về thanh toán AWS Quyền truy cập CloudWatch Kiến thức cơ bản về quản lý chi phí Ước tính Thời gian Tổng thời gian Module: ~2 giờ Thời gian mỗi Phần: 30 phút Cấu trúc Module CloudWatch Logs\nCấu hình log Tạo chỉ số Phân tích Chi phí\nPhân tích chi phí Mẫu sử dụng Tối ưu Cấu hình\nTối ưu tài nguyên Giảm chi phí Ước tính Sử dụng\nDự báo sử dụng Lập kế hoạch năng lực Kết quả Mong đợi Đến cuối module này, bạn sẽ có:\nCấu hình giám sát CloudWatch Phân tích chi phí tài nguyên Tối ưu hóa cấu hình Ước tính sử dụng tương lai Triển khai kiểm soát chi phí Hãy bắt đầu với CloudWatch Logs!\n"
},
{
	"uri": "//localhost:1313/vi/8-clean-up/",
	"title": "Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp Tài nguyên Workshop Chuẩn bị Dọn dẹp [Chèn ảnh: Chuẩn bị dọn dẹp]\nTạo Danh sách Tài nguyên\n# Liệt kê tài nguyên AWS aws resourcegroupstaggingapi get-resources \\ --tag-filters Key=Project,Values=test-automation [Chèn ảnh: Liệt kê tài nguyên]\nXác minh Phụ thuộc Tài nguyên [Chèn ảnh: Xác minh phụ thuộc]\nPhụ thuộc dịch vụ Quan hệ tài nguyên Phụ thuộc dữ liệu Xóa Tài nguyên AWS [Chèn ảnh: Xóa tài nguyên]\nXóa Tài nguyên CodeBuild\n# Xóa dự án CodeBuild aws codebuild delete-project --name test-automation # Xóa bucket artifacts aws s3 rm s3://test-artifacts-bucket --recursive aws s3 rb s3://test-artifacts-bucket [Chèn ảnh: Dọn dẹp CodeBuild]\nDọn dẹp Tài nguyên CloudWatch\n# Xóa nhóm log aws logs delete-log-group --log-group-name /aws/codebuild/test-automation # Xóa bảng điều khiển aws cloudwatch delete-dashboards --dashboard-names test-automation [Chèn ảnh: Dọn dẹp CloudWatch]\nXác minh Dọn dẹp [Chèn ảnh: Xác minh dọn dẹp]\nKiểm tra Trạng thái Tài nguyên\nXác minh xóa Kiểm tra tài nguyên còn lại Xác nhận dọn dẹp [Chèn ảnh: Kiểm tra trạng thái] Xem xét Tác động Thanh toán [Chèn ảnh: Xem xét thanh toán]\nKiểm tra phí hiện tại Xác minh chấm dứt tài nguyên Theo dõi hóa đơn cuối cùng Danh sách Xác minh Tài nguyên đã xác định Phụ thuộc đã giải quyết Tài nguyên đã xóa Dọn dẹp đã xác minh Thanh toán đã kiểm tra Hướng dẫn Xử lý Sự cố [Chèn ảnh: Vấn đề dọn dẹp phổ biến]\nVấn đề Xóa\nKhóa tài nguyên Vấn đề quyền Xung đột phụ thuộc Vấn đề Xác minh\nTài nguyên ẩn Xóa chậm Cập nhật thanh toán Vấn đề Phụ thuộc\nKết nối dịch vụ Liên kết tài nguyên Quan hệ dữ liệu Thực hành Tốt nhất [Chèn ảnh: Thực hành tốt nhất dọn dẹp]\nQuản lý Tài nguyên\nXóa có hệ thống Xử lý phụ thuộc Các bước xác minh Tài liệu hóa\nTheo dõi tài nguyên Quy trình dọn dẹp Giải quyết vấn đề Bước Cuối cùng Sau khi dọn dẹp, xác minh tất cả tài nguyên đã được xóa và không có phí bất ngờ phát sinh.\n"
},
{
	"uri": "//localhost:1313/vi/8-clean-up/cleanup/",
	"title": "Hướng dẫn Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn Dọn dẹp Tài nguyên Tổng quan Thực hiện theo các bước sau một cách cẩn thận để xóa tất cả tài nguyên đã tạo trong workshop. Các bước được sắp xếp để xử lý phụ thuộc chính xác và ngăn chặn bất kỳ tài nguyên mồ côi nào.\nCác bước Dọn dẹp 1. Tài nguyên CodeBuild Xóa dự án CodeBuild: # Liệt kê tất cả dự án CodeBuild aws codebuild list-projects # Xóa từng dự án aws codebuild delete-project --name dotnet-test-automation aws codebuild delete-project --name performance-test-project Xóa artifacts build: # Xóa nội dung bucket S3 aws s3 rm s3://test-results-bucket --recursive # Xóa bucket aws s3 delete-bucket --bucket test-results-bucket 2. Tài nguyên CloudWatch Xóa nhóm log: # Xóa nhóm log CodeBuild aws logs delete-log-group --log-group-name /aws/codebuild/test-automation # Xóa nhóm log thực thi kiểm thử aws logs delete-log-group --log-group-name /aws/test-execution Xóa bảng điều khiển CloudWatch: # Xóa bảng điều khiển tùy chỉnh aws cloudwatch delete-dashboards --dashboard-names TestAutomationDashboard Xóa cảnh báo: # Xóa cảnh báo chi phí và hiệu năng aws cloudwatch delete-alarms --alarm-names ChiPhiKiemThuCao SuDungTaiNguyenCao 3. Tài nguyên IAM Xóa vai trò IAM: # Đầu tiên gỡ các policy aws iam detach-role-policy \\ --role-name CodeBuildServiceRole \\ --policy-arn arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess # Sau đó xóa vai trò aws iam delete-role --role-name CodeBuildServiceRole Xóa policy tùy chỉnh: # Liệt kê và xóa policy tùy chỉnh aws iam list-policies --scope Local aws iam delete-policy --policy-arn \u0026lt;policy-arn\u0026gt; 4. Tích hợp GitHub Xóa kết nối GitHub:\nĐi đến AWS CodeBuild console Điều hướng đến Source providers Xóa kết nối GitHub Xóa webhook:\nĐi đến cài đặt GitHub repository Điều hướng đến Webhooks Xóa webhook AWS CodeBuild 5. Các bước Xác minh Xác minh xóa tài nguyên: # Kiểm tra dự án CodeBuild aws codebuild list-projects # Kiểm tra nhóm log CloudWatch aws logs describe-log-groups # Kiểm tra vai trò IAM aws iam list-roles | grep CodeBuild Kiểm tra AWS Cost Explorer: Xác minh không có chi phí đang diễn ra Kiểm tra bất kỳ tài nguyên còn lại Theo dõi thanh toán trong vài ngày tới Các Thực hành Tốt nhất Theo dõi Tài nguyên\nDuy trì kiểm kê tài nguyên Tài liệu hóa phụ thuộc Sử dụng thẻ hiệu quả Kiểm toán thường xuyên Quy trình Dọn dẹp\nTuân theo thứ tự phụ thuộc Xác minh từng bước Ghi chép vấn đề Sao lưu dữ liệu quan trọng Quản lý Chi phí\nGiám sát thanh toán Thiết lập cảnh báo Kiểm tra thường xuyên Ghi chép chi phí Vấn đề Thường gặp và Giải pháp Xung đột Phụ thuộc\nTuân theo thứ tự đúng Xóa cưỡng bức nếu cần Kiểm tra phụ thuộc Ghi chép lỗi Vấn đề Quyền\nXác minh vai trò IAM Kiểm tra quyền Sử dụng tài khoản admin Ghi chép truy cập Khóa Tài nguyên\nKiểm tra trạng thái tài nguyên Đợi hoàn thành Chấm dứt cưỡng bức Ghi chép khóa Xác minh Cuối cùng Chạy script xác minh: #!/bin/bash echo \u0026#34;Kiểm tra tài nguyên CodeBuild...\u0026#34; aws codebuild list-projects echo \u0026#34;Kiểm tra tài nguyên CloudWatch...\u0026#34; aws logs describe-log-groups aws cloudwatch describe-alarms echo \u0026#34;Kiểm tra tài nguyên IAM...\u0026#34; aws iam list-roles | grep CodeBuild echo \u0026#34;Kiểm tra bucket S3...\u0026#34; aws s3 ls | grep test-results if [ $? -eq 0 ]; then echo \u0026#34;Cảnh báo: Một số tài nguyên có thể vẫn tồn tại\u0026#34; else echo \u0026#34;Tất cả tài nguyên đã được dọn dẹp thành công\u0026#34; fi Tài liệu hóa trạng thái dọn dẹp: # Báo cáo Trạng thái Dọn dẹp Ngày: $(date) Trạng thái: Hoàn thành/Chưa hoàn thành ## Tài nguyên Đã Kiểm tra - Dự án CodeBuild: [Trạng thái] - Tài nguyên CloudWatch: [Trạng thái] - Vai trò IAM: [Trạng thái] - Bucket S3: [Trạng thái] ## Vấn đề Gặp phải - [Liệt kê các vấn đề] ## Hành động Tiếp theo - [Liệt kê các hành động cần thiết] Bước tiếp theo Theo dõi thanh toán AWS cho chu kỳ thanh toán tiếp theo Xóa bất kỳ file cục bộ nào liên quan đến workshop Tài liệu hóa bài học kinh nghiệm Cập nhật tài liệu nhóm "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]