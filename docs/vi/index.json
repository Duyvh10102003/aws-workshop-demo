[
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Workshop: Tự động hóa Kiểm thử Hiện đại với AWS CodeBuild \u0026amp; Thực thi Song song Tổng quan Kiến trúc Yêu cầu Tiên quyết Tài khoản AWS với quyền quản trị Tài khoản GitHub Kiến thức cơ bản về phát triển .NET Visual Studio Code hoặc IDE ưa thích AWS CLI đã cài đặt cục bộ Những gì Bạn sẽ Xây dựng Trong workshop này, bạn sẽ:\nThiết lập pipeline CI/CD hoàn chỉnh cho tự động hóa kiểm thử Triển khai kiểm thử đơn vị tự động Cấu hình thực thi kiểm thử song song Thêm kiểm thử hiệu năng Kích hoạt quét bảo mật Ước tính Thời gian Tổng thời gian workshop: ~8 giờ\nThiết lập Môi trường: 1 giờ Kiểm thử Tự động: 2 giờ Thực thi Song song: 1.5 giờ Kiểm thử Hiệu năng: 1.5 giờ Kiểm thử Bảo mật: 1 giờ Giám sát Chi phí: 0.5 giờ Dọn dẹp: 0.5 giờ Ước tính Chi phí Chi phí AWS ước tính để hoàn thành workshop này:\nCodeBuild: ~$1-2 CloudWatch: ~$1 S3 Storage: \u0026lt; $1 Tổng: ~$3-4 Hãy bắt đầu với Thiết lập Môi trường!\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/5-monitoring/5.1-create-sns/",
	"title": "Tạo SNS Topic và đăng ký email",
	"tags": [],
	"description": "",
	"content": "Tạo SNS Topic Truy cập Amazon SNS Console\nClick Create topic Điền thông tin:\nType: Standard Name: test-failure-alerts Display name: Test Failure Alerts Click Create Đăng ký email Trong topic vừa tạo, chọn Create subscription Cấu hình:\nProtocol: Email Endpoint: your-email@example.com Click Create subscription\nKiểm tra email và xác nhận đăng ký Bạn phải xác nhận email subscription bằng cách click vào link trong email xác nhận.\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/2-environment-setup/2.1-website-setup/",
	"title": "Thiết lập Website",
	"tags": [],
	"description": "",
	"content": "Các Tùy Chọn Thiết Lập Website Bạn có hai lựa chọn để thiết lập website cho workshop này:\nTùy Chọn A: Sử Dụng Website Xem Phim Mẫu Fork repository website xem phim mẫu:\nTruy cập: https://github.com/Duyvh10102003/WebsiteXemPhim Nhấp vào nút \u0026ldquo;Fork\u0026rdquo; ở góc trên bên phải Chọn tài khoản GitHub của bạn làm điểm đến Clone repository đã fork:\ngit clone https://github.com/[TÊN-NGƯỜI-DÙNG]/WebsiteXemPhim.git cd WebsiteXemPhim Chuyển sang nhánh HoangDuy:\ngit checkout HoangDuy Tùy Chọn B: Sử Dụng Website Của Riêng Bạn Nếu bạn muốn sử dụng website của riêng mình, hãy làm theo các bước sau:\nTạo repository GitHub mới:\nTruy cập https://github.com/new Đặt tên cho repository Chọn chế độ hiển thị công khai hoặc riêng tư Khởi tạo với README nếu muốn Đẩy code website của bạn lên:\ngit init git add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/[TÊN-NGƯỜI-DÙNG]/[TÊN-REPO].git git push -u origin main Lưu Ý Quan Trọng Đảm bảo code website của bạn nằm ở thư mục gốc của repository Repository phải có thể truy cập được bởi AWS CodeBuild Nếu sử dụng repository riêng tư, sẽ cần thêm cấu hình cho AWS CodeBuild Bước Tiếp Theo Sau khi hoàn thành một trong hai tùy chọn trên, hãy tiếp tục với phần Cài Đặt Công Cụ Cần Thiết\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/3-automated-unit-test/3.1-codebuild-setup/",
	"title": "Viết Unit Test đầu tiên",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo một file test đơn giản để đảm bảo hệ thống CI/CD có thể chạy unit test đúng cách.\n✅ Mục tiêu Tạo test file đơn giản sử dụng xUnit Giả lập quá trình test có độ trễ Kiểm tra tính đúng đắn và hiệu năng khi chạy test song song sau này 📁 Các bước thực hiện Tạo file tại: Web.Tests/LuotXemTests.cs\nusing System.Threading; using Xunit; namespace Web.Tests { public class LuotXemTests { [Fact] public void Fake_LuotXem_Test1() { Thread.Sleep(1000); // giả lập test mất 1 giây Assert.True(true); } [Fact] public void Fake_LuotXem_Test2() { Thread.Sleep(1000); Assert.True(true); } } } ✅ Kiểm tra Chạy lệnh sau trong thư mục gốc để kiểm tra test:\ndotnet test Kết quả mong đợi:\nPassed! - Failed: 0, Passed: 2, Skipped: 0 📌 Ghi chú Các Thread.Sleep() được sử dụng để mô phỏng thời gian xử lý của test. Bạn sẽ thấy hiệu quả rõ rệt khi áp dụng Parallel Execution (phần 4).\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/2-environment-setup/2.2-install-tools/",
	"title": "Cài Đặt Công Cụ Cần Thiết",
	"tags": [],
	"description": "",
	"content": "Cài Đặt Công Cụ Cần Thiết Để tiến hành kiểm thử tự động bằng AWS CodeBuild, bạn cần cài đặt và cấu hình một số công cụ.\n1. Cài Đặt AWS CLI Cho Windows: Tải trình cài đặt AWS CLI MSI:\nTruy cập: https://aws.amazon.com/cli/ Tải xuống bản cài đặt Windows x64 Chạy trình cài đặt:\nNhấp đúp vào file đã tải Làm theo hướng dẫn cài đặt Kiểm tra cài đặt bằng cách mở Command Prompt và chạy: aws --version Cho Linux: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Cho macOS: brew install awscli 2. Cấu Hình AWS CLI Lấy thông tin xác thực AWS:\nAccess Key ID Secret Access Key Vùng mặc định (ví dụ: us-east-1) Chạy cấu hình:\naws configure Nhập thông tin xác thực khi được yêu cầu:\nAWS Access Key ID: [Access Key của bạn] AWS Secret Access Key: [Secret Key của bạn] Default region name: [Vùng của bạn] Default output format: json 3. Cài Đặt Git (nếu chưa có) Cho Windows: Tải từ: https://git-scm.com/download/win Chạy trình cài đặt với tùy chọn mặc định Cho Linux: sudo apt-get update sudo apt-get install git Cho macOS: brew install git 4. Visual Studio Code (Tùy chọn nhưng khuyến nghị) Tải VS Code:\nTruy cập: https://code.visualstudio.com/ Chọn phiên bản cho nền tảng của bạn Cài đặt các tiện ích mở rộng được khuyến nghị:\nAWS Toolkit C# Dev Kit Git Extension Pack Các Bước Xác Minh Kiểm tra AWS CLI: aws --version Kiểm tra Git: git --version Kiểm tra cấu hình AWS: aws sts get-caller-identity Xử Lý Sự Cố Vấn đề với AWS CLI:\nĐảm bảo thông tin xác thực AWS chính xác Kiểm tra quyền của người dùng IAM Xác minh vùng mặc định được cài đặt đúng Vấn đề với Git:\nĐảm bảo Git nằm trong PATH của hệ thống Cấu hình Git với thông tin của bạn: git config --global user.name \u0026#34;Tên Của Bạn\u0026#34; git config --global user.email \u0026#34;email.cua.ban@example.com\u0026#34; Bước Tiếp Theo Sau khi cài đặt và cấu hình tất cả công cụ cần thiết, tiếp tục với phần Tạo S3 Bucket\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/3-automated-unit-test/3.2-buildspec-setup/",
	"title": "Cấu hình Buildspec ",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ tạo file buildspec.yml để:\nCài đặt tool tạo báo cáo test Chạy unit test có ghi log kết quả Sinh HTML test report dễ xem Chuẩn bị sẵn cho các bước upload kết quả hoặc phân tích ✅ Mục tiêu Cài đặt dotnet-reportgenerator-globaltool Chạy test và xuất log theo định dạng .trx Sinh báo cáo HTML dễ đọc 📁 Cấu trúc thư mục YourProject/ ├── Web.Tests/ ├── buildspec.yml └── TestReport/ └── index.html 🧾 Nội dung file buildspec.yml version: 0.2 phases: install: runtime-versions: dotnet: 8.0 commands: - echo === Installing reportgenerator tool === - dotnet tool install -g dotnet-reportgenerator-globaltool - export PATH=\u0026#34;$PATH:/root/.dotnet/tools\u0026#34; build: commands: - echo === Restoring dependencies === - dotnet restore - echo === Building solution === - dotnet build --no-restore - echo === Running unit tests === - dotnet test Web.Tests/Web.Tests.csproj --logger \u0026#34;trx;LogFileName=test_results.trx\u0026#34; - echo === Generating HTML test report === - reportgenerator \u0026#34;-reports:**/test_results.trx\u0026#34; \u0026#34;-targetdir:TestReport\u0026#34; -reporttypes:Html artifacts: files: - TestReport/**/* discard-paths: no 💡 Giải thích Mục Mô tả dotnet tool install Cài đặt tool sinh báo cáo test dưới dạng HTML dotnet test + \u0026ndash;logger Ghi kết quả test ra file .trx (Test Result XML) reportgenerator Tạo báo cáo HTML từ file .trx artifacts.files Chỉ định output cần lưu trữ (báo cáo test) 🔄 Các bước thực hiện Tạo file buildspec.yml trong thư mục gốc của dự án Copy nội dung buildspec từ hướng dẫn Commit và push lên repository Kiểm tra build trong CodeBuild 📌 Ghi chú File .trx chứa thông tin chi tiết về kết quả test Báo cáo HTML giúp dễ dàng xem và phân tích kết quả Artifacts được lưu lại để tham khảo sau này Cấu hình này là nền tảng cho việc tích hợp với các công cụ phân tích khác "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/5-monitoring/5.2-cloudwatch-rule/",
	"title": "Tạo CloudWatch Rule",
	"tags": [],
	"description": "",
	"content": "Tạo EventBridge Rule Truy cập Amazon EventBridge Console\nClick Create rule Cấu hình rule:\nName: codebuild-failure-rule Description: Monitor CodeBuild test failures Trong phần Event pattern, chọn:\nService: CodeBuild Event type: CodeBuild Build State Change Chọn Next "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/2-environment-setup/",
	"title": "Thiết Lập Môi Trường",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Module này hướng dẫn bạn thiết lập môi trường phát triển. Bạn có thể sử dụng website mẫu có sẵn hoặc triển khai website của riêng bạn để kiểm thử.\nNhững Gì Bạn Sẽ Học Tùy Chọn Thiết Lập Website\nTùy chọn A: Sử dụng website xem phim mẫu Tùy chọn B: Triển khai website của riêng bạn lên GitHub Cài Đặt Công Cụ Cần Thiết\nCài đặt và cấu hình AWS CLI Thiết lập công cụ phát triển Cài đặt SDK cần thiết Điều Kiện Tiên Quyết Trước khi bắt đầu module này, hãy đảm bảo bạn có:\nTài khoản AWS với quyền thích hợp Tài khoản GitHub Kiến thức cơ bản về Git và GitHub Quyền truy cập quản trị vào máy phát triển của bạn Ước Tính Thời Gian Tổng thời gian Module: ~30 phút Thời gian cho mỗi phần: 10-15 phút Cấu Trúc Module Thiết Lập Website\nSử dụng website xem phim mẫu HOẶC triển khai website của riêng bạn Cài Đặt Công Cụ Cần Thiết\nThiết lập môi trường phát triển Cài đặt công cụ AWS Kết Quả Mong Đợi Khi kết thúc module này, bạn sẽ có:\nMột repository website hoạt động trên GitHub Tất cả công cụ phát triển cần thiết được cài đặt AWS CLI được cấu hình và sẵn sàng sử dụng Hãy bắt đầu với Thiết Lập Website!\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/3-automated-unit-test/",
	"title": "Framework Testing Tự Động",
	"tags": [],
	"description": "",
	"content": "Trong module này, chúng ta sẽ xây dựng một framework testing tự động cho website xem phim bằng cách sử dụng AWS CodeBuild và các công cụ testing hiện đại.\n🎯 Mục tiêu Thiết lập môi trường testing tự động với AWS CodeBuild Viết và chạy unit test cho các component Tạo báo cáo test chi tiết và dễ đọc Tự động hóa quy trình testing khi có code mới 📋 Nội dung chính Viết Unit Test Đầu Tiên\nTạo test file đơn giản Cấu trúc test cơ bản Giả lập test delay Cấu Hình Buildspec\nTạo file buildspec.yml Cài đặt công cụ báo cáo Cấu hình output artifacts Thiết Lập CodeBuild\nTạo project CodeBuild Kết nối với GitHub Cấu hình môi trường build Kiểm Tra Kết Quả\nChạy và xem kết quả build Phân tích báo cáo test Xử lý lỗi (nếu có) ⚙️ Kiến thức cần có Hiểu biết cơ bản về testing trong .NET Đã cài đặt và cấu hình AWS CLI Có tài khoản GitHub với repository ⏱ Thời gian ước tính Tổng thời gian: ~2 giờ Mỗi phần: 25-30 phút 📌 Kết quả mong đợi Sau khi hoàn thành module này, bạn sẽ có:\nFramework Testing Hoàn Chỉnh\nUnit test tự động chạy Báo cáo test chi tiết Tích hợp với GitHub Quy Trình CI/CD\nTự động test khi push code Lưu trữ kết quả test Thông báo khi có lỗi Tài Liệu \u0026amp; Báo Cáo\nHTML test report Log build chi tiết Thống kê test coverage 🛠 Công cụ sử dụng AWS CodeBuild: Dịch vụ CI/CD tự động xUnit: Framework testing cho .NET ReportGenerator: Tạo báo cáo HTML GitHub: Quản lý source code 💡 Mẹo Đọc kỹ phần cấu hình buildspec.yml Test local trước khi push Kiểm tra log khi có lỗi Tổ chức test theo cấu trúc rõ ràng 🔍 Xử lý sự cố Kiểm tra quyền truy cập AWS Verify cấu hình GitHub Xem log build chi tiết Chạy test local để debug Hãy đảm bảo hoàn thành từng bước trước khi chuyển sang bước tiếp theo\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/5-monitoring/5.3-connect-rule-sns/",
	"title": "Kết nối Rule với SNS",
	"tags": [],
	"description": "",
	"content": "Thêm SNS Target Cấu hình target:\nTarget type: SNS topic Topic: test-failure-alerts Chọn Next: Xem Review và chọn Create Rule Bạn đã tạo CloudWatch Rule thành công: "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/2-environment-setup/2.3-create-s3/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo một S3 bucket để lưu trữ báo cáo test từ AWS CodeBuild.\n🔧 Các bước thực hiện 1️⃣ Truy cập Amazon S3 Đăng nhập vào AWS Console Tìm và chọn dịch vụ S3 2️⃣ Tạo Bucket Nhấn nút Create bucket Nhập tên bucket: dotnet-unit-test-report Giữ các cài đặt khác ở mặc định Nhấn Create bucket 3️⃣ Xác nhận Bucket mới sẽ xuất hiện trong danh sách Trạng thái bucket là \u0026ldquo;Created\u0026rdquo; 📝 Ghi chú Bucket này sẽ được sử dụng để lưu báo cáo test từ CodeBuild Tên bucket phải là duy nhất trên toàn cầu Các cài đặt mặc định đã đủ cho mục đích của workshop "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/3-automated-unit-test/3.3-codebuild-project/",
	"title": "Thiết lập CodeBuild để chạy Unit Test",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo một project CodeBuild để chạy tự động unit test từ mã nguồn trong GitHub, sử dụng file buildspec.yml đã cấu hình ở bước trước.\n🎯 Mục tiêu Tạo project trong AWS CodeBuild Kết nối GitHub với AWS Cấu hình môi trường chạy build Chạy buildspec.yml đã thiết lập từ repo (Tuỳ chọn) Lưu báo cáo test lên Amazon S3 🔧 Các bước thực hiện 1️⃣ Truy cập AWS CodeBuild Mở trang: https://console.aws.amazon.com/codebuild/home Nhấn Create build project 2️⃣ Nhập thông tin Project Project name: ci-dotnet-unittest Description: Chạy unit test và sinh báo cáo HTML 3️⃣ Cấu hình nguồn (Source) Trong phần Source, chọn Source provider là GitHub (Version 2) và chọn Manage account credentials nếu bạn chưa kết nối GitHub. Nhấn create a new GitHub connection để bắt đầu tạo kết nối Một cửa sổ mới sẽ mở ra. Nhập tên cho connection: Chọn Install a new app để kết nối tới GitHub của bạn Nhập mật khẩu GitHub để kết nối Sau khi kết nối thành công, bạn sẽ thấy thông báo xác nhận Quay lại trang Manage default source credential, chọn connection vừa tạo Quay lại trang CodeBuild, chọn repository vừa kết nối và chọn branch chính của dự án (thường là main hoặc master) Trong phần Primary source webhook events, chọn ✅ Tick vào \u0026ldquo;Rebuild every time a code change is pushed to this repository\u0026rdquo; 4️⃣ Thiết lập môi trường build Provisioning model: On-demand Environment image: Managed image Compute: EC2 Running mode: Container Operating System: Amazon Linux Runtime: Standard Image: aws/codebuild/amazonlinux-x86_64-standard:5.0 5️⃣ Buildspec file Buildspec: chọn Use a buildspec file Đảm bảo repo của bạn có file buildspec.yml ở thư mục gốc 6️⃣ (Tuỳ chọn) Artifact để lưu báo cáo Nếu bạn muốn lưu báo cáo test HTML: Artifacts type: Amazon S3 S3 bucket: chọn bucket đã tạo trước 7️⃣ Tạo project Nhấn Create build project Sau khi tạo xong: Có thể chọn Start build để chạy thử Hoặc push code lên GitHub để webhook tự động chạy 🧠 Mẹo thêm Nếu repo chưa có buildspec.yml, bạn có thể dùng tuỳ chọn \u0026ldquo;Insert build commands\u0026rdquo; để viết trực tiếp, nhưng không khuyến khích. Sau khi tạo project, AWS sẽ tự chạy test mỗi lần bạn nhấn \u0026ldquo;Start build\u0026rdquo; hoặc khi có push (nếu bật webhook). Với GitHub version 2, bạn có thể chọn repo từ dropdown. Nếu dùng PAT thì cần dán token thủ công. "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/5-monitoring/5.4-verify/",
	"title": "Kiểm tra hoạt động cảnh báo",
	"tags": [],
	"description": "",
	"content": "Tạo test case thất bại Thêm một test case sẽ fail vào project: [Fact] public void Test_Should_Fail() { Assert.True(false); // Test này sẽ luôn fail } Commit và push code: git add . git commit -m \u0026#34;test: add failing test to verify notifications\u0026#34; git push Theo dõi quá trình Truy cập CodeBuild console để xem build Đợi build thất bại Kiểm tra email Sau khi xác nhận hệ thống hoạt động, đừng quên sửa lại test case để không ảnh hưởng tới pipeline thực tế.\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/3-automated-unit-test/3.4-verify-results/",
	"title": "Kiểm tra kết quả Test tự động khi Push code",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ thực hiện push code lên GitHub và xem kết quả test tự động từ AWS CodeBuild.\n🎯 Mục tiêu Push code lên GitHub repository Xem CodeBuild tự động chạy test Kiểm tra kết quả và báo cáo test 🔧 Các bước thực hiện 1️⃣ Push code lên GitHub git add . git commit -m \u0026#34;Test trigger CodeBuild from GitHub\u0026#34; git push origin main 2️⃣ Theo dõi Build tự động Vào AWS CodeBuild console Chọn project ci-dotnet-unittest Quan sát build mới tự động được tạo 3️⃣ Xem chi tiết quá trình Build Trong tab Build details, bạn có thể theo dõi:\nPhase details: Các bước đang chạy Build logs: Log chi tiết của quá trình test Environment variables: Biến môi trường được sử dụng 4️⃣ Kiểm tra kết quả Test trong CloudWatch Vào CloudWatch Logs Tìm Log group của CodeBuild Xem chi tiết log của build vừa chạy Trong log, tìm đoạn:\nRunning tests... Passed! - Failed: 0, Passed: 2, Skipped: 0 Test Run Successful. 5️⃣ Xem báo cáo Test trong S3 Vào S3 bucket đã cấu hình Tìm thư mục TestReport Tải về và mở file index.html 💡 Mẹo Theo dõi build status:\nBookmark trang build history Bật thông báo email Cài đặt AWS CLI để check status Debug hiệu quả:\n# Xem log của build gần nhất aws codebuild batch-get-builds --ids \u0026lt;build-id\u0026gt; Tối ưu thời gian:\nPush code có ý nghĩa Chạy test local trước Kiểm tra buildspec syntax 📝 Ghi chú Build tự động chỉ chạy khi push vào branch được cấu hình Mỗi push sẽ tạo một build mới Log được lưu trong CloudWatch Báo cáo HTML được cập nhật sau mỗi lần build Luôn kiểm tra status của build trước khi rời khỏi máy tính\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/4-parallel-execution/",
	"title": "Tối ưu kiểm thử song song với nhiều file test",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ học cách chia nhỏ các bài test ra nhiều file để kiểm thử độc lập và tăng tốc quá trình CI bằng cách thực thi song song. Điều này đặc biệt hữu ích khi số lượng test tăng lên hoặc thời gian test kéo dài.\n🎯 Mục tiêu Tách riêng các test theo chức năng (LuotXemTests, PerformanceTests, …) Hỗ trợ chạy song song để tối ưu thời gian kiểm thử Kiểm tra khả năng trigger CI với các test chia nhỏ 🧪 Ví dụ tổ chức file test Web.Tests/LuotXemTests.cs using System.Threading; using Xunit; namespace Web.Tests { public class LuotXemTests { [Fact] public void Fake_LuotXem_Test1() { Thread.Sleep(1000); // giả lập test mất 1 giây Assert.True(true); } [Fact] public void Fake_LuotXem_Test2() { Thread.Sleep(1000); Assert.True(true); } } } Web.Tests/PerformanceTests.cs using System.Threading; using Xunit; namespace Web.Tests { public class PerformanceTests { [Fact] public void Fake_Performance_Test1() { Thread.Sleep(1000); // giả lập test tốn thời gian Assert.True(true); } [Fact] public void Fake_Performance_Test2() { Thread.Sleep(1000); Assert.True(true); } } } ⚙️ Buildspec không cần thay đổi Vì dotnet test sẽ tự động phát hiện và chạy tất cả các file test trong Web.Tests, nên bạn không cần thay đổi file buildspec.yml.\n- dotnet test Web.Tests/Web.Tests.csproj --logger \u0026#34;trx;LogFileName=test_results.trx\u0026#34; 📦 Gợi ý mở rộng: Chạy test song song bằng nhiều CodeBuild (nâng cao) Nếu số lượng test quá lớn, bạn có thể chia ra nhiều CodeBuild chạy theo nhóm test khác nhau bằng cách tạo nhiều project hoặc chia bước test trong buildspec.yml thành nhiều dòng.\nCũng có thể dùng dotnet test \u0026ndash;filter để chọn test cụ thể theo Category, Class, MethodName, …\nVí dụ:\n- dotnet test Web.Tests/Web.Tests.csproj --filter \u0026#34;FullyQualifiedName~PerformanceTests\u0026#34; - dotnet test Web.Tests/Web.Tests.csproj --filter \u0026#34;FullyQualifiedName~LuotXemTests\u0026#34; ✅ Kiểm tra kết quả Sau khi push code, CodeBuild sẽ tự động chạy lại toàn bộ test Mở mục Build history trong CodeBuild để xem kết quả từng lần build Kiểm tra báo cáo test: CodeBuild → Build projects → Build history → ci-dotnet-unittest → [Chọn bản build gần nhất]→ Reports → [Chọn bản report gần nhất] 🧠 Mẹo thêm Nếu muốn test song song ở cấp độ thread, bạn có thể cấu hình xUnit parallelism:\nDùng dotnet test \u0026ndash;parallel Hoặc chỉnh trong xunit.runner.json Để tối ưu hơn nữa, bạn có thể:\nNhóm các test liên quan vào cùng collection Sử dụng AWS CodeBuild matrix builds Cấu hình test retry cho các test không ổn định "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/5-monitoring/",
	"title": "Gửi cảnh báo khi test thất bại",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ học cách thiết lập hệ thống cảnh báo tự động khi có test thất bại, sử dụng Amazon CloudWatch để theo dõi và Amazon SNS để gửi thông báo.\n🎯 Mục tiêu Tạo thông báo tự động (email, SMS\u0026hellip;) khi một bản build thất bại Dùng Amazon CloudWatch để theo dõi trạng thái build Dùng Amazon SNS (Simple Notification Service) để gửi cảnh báo Giúp người quản lý/dev biết ngay khi có lỗi test xảy ra 🧱 Các bước thực hiện Bước Mô tả ngắn 5.1 Tạo SNS topic \u0026amp; đăng ký email nhận thông báo 5.2 Tạo CloudWatch Rule để bắt lỗi từ CodeBuild 5.3 Kết nối Rule → SNS topic để gửi cảnh báo 5.4 Test thử bằng build lỗi và xác nhận nhận được email 🌐 Kiến trúc tổng quan CodeBuild thực thi các bài test CloudWatch theo dõi trạng thái của build Khi phát hiện build thất bại, CloudWatch Rule được kích hoạt Rule gửi thông báo tới SNS Topic SNS gửi email tới các địa chỉ đã đăng ký Tạo SNS Topic và đăng ký email\rTạo CloudWatch Rule\rKết nối Rule với SNS\rKiểm tra hoạt động cảnh báo\r"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/6-security-testing/",
	"title": "Tự động quét bảo mật với CodeQL",
	"tags": [],
	"description": "",
	"content": "Bạn sẽ cấu hình GitHub Actions để tự động kiểm tra lỗi bảo mật trong source code .NET. Tất cả hoàn toàn tự động, chạy mỗi khi bạn push code hoặc mở Pull Request.\n🎯 Mục tiêu Bật sẵn workflow \u0026ldquo;CodeQL\u0026rdquo; trong GitHub Không cần code gì thêm Kiểm tra lỗi bảo mật trực tiếp trên GitHub 🔧 Các bước cấu hình 1️⃣ Mở tab Actions trên GitHub Truy cập trang repo của bạn Nhấn vào tab \u0026ldquo;Actions\u0026rdquo; (nằm trên thanh menu ngang) 2️⃣ Bật workflow sẵn có tên là \u0026ldquo;CodeQL Analysis\u0026rdquo; Tìm mục \u0026ldquo;Security → Code scanning → CodeQL Analysis\u0026rdquo; Nhấn \u0026ldquo;Configure\u0026rdquo; 3️⃣ Nhấn Start commit Giữ nguyên file như mặc định Nhấn nút \u0026ldquo;Start commit\u0026rdquo; → Commit directly to main GitHub sẽ tự tạo file .github/workflows/codeql.yml cho bạn 4️⃣ Chờ workflow chạy Vào lại tab Actions, thấy workflow \u0026ldquo;CodeQL\u0026rdquo; đang chạy Mất khoảng 1–2 phút để phân tích 5️⃣ Xem kết quả bảo mật Vào tab \u0026ldquo;Security\u0026rdquo; \u0026gt; \u0026ldquo;Code scanning alerts\u0026rdquo; Nếu có lỗi bảo mật trong code (như SQL injection, lỗi null, hardcoded password, \u0026hellip;), GitHub sẽ liệt kê chi tiết tại đây 🧠 Mẹo thêm CodeQL tự hiểu repo là C#/.NET, bạn không cần khai báo thêm Có thể bật CodeQL cho tất cả các nhánh (sửa phần branches: trong codeql.yml) Muốn quét định kỳ (dù không push)? CodeQL hỗ trợ schedule 📘 Tài liệu thêm Code scanning alerts CodeQL GitHub Action "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/7-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Để tránh phát sinh chi phí không cần thiết, chúng ta cần xóa các tài nguyên đã tạo trong workshop này.\n🔧 Các bước thực hiện 1️⃣ Xóa CodeBuild Project Truy cập AWS CodeBuild Console Chọn project ci-dotnet-unittest Chọn Delete từ menu Actions 2️⃣ Xóa CloudWatch Rule Mở Amazon EventBridge Console Tìm rule codebuild-failure-rule Chọn rule và nhấn Delete 3️⃣ Xóa SNS Topic Truy cập Amazon SNS Console Chọn topic test-failure-alerts Nhấn Delete 4️⃣ Xóa S3 Bucket Mở Amazon S3 Console Tìm bucket chứa artifacts của CodeBuild Chọn bucket và nhấn Empty Sau đó nhấn Delete ✅ Kiểm tra lại Đảm bảo các tài nguyên sau đã được xóa:\nDịch vụ Tài nguyên cần xóa CodeBuild Project ci-dotnet-unittest CloudWatch Rule codebuild-failure-rule SNS Topic test-failure-alerts S3 Bucket chứa artifacts 🧠 Mẹo Sử dụng AWS CLI để xóa nhanh nhiều tài nguyên: # Xóa CodeBuild project aws codebuild delete-project --name ci-dotnet-unittest # Xóa CloudWatch rule aws events delete-rule --name codebuild-failure-rule # Xóa SNS topic aws sns delete-topic --topic-arn arn:aws:sns:region:account-id:test-failure-alerts # Xóa S3 bucket (phải empty trước) aws s3 rm s3://your-bucket-name --recursive aws s3 rb s3://your-bucket-name ⚠️ Lưu ý quan trọng Đảm bảo xóa đúng tài nguyên của workshop Kiểm tra kỹ trước khi xóa Một số tài nguyên phụ thuộc cần xóa theo thứ tự Giữ lại source code trên GitHub nếu muốn tham khảo sau "
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/",
	"title": "Workshop Automated Testing Framework",
	"tags": [],
	"description": "",
	"content": "🚀 Xây dựng Framework Kiểm thử Tự động Workshop này sẽ giúp bạn xây dựng một hệ thống kiểm thử tự động hoàn chỉnh cho website xem phim, sử dụng .NET và các dịch vụ AWS.\n🎯 Bạn sẽ học được gì? Thiết lập pipeline CI/CD với AWS CodeBuild Viết và chạy unit test tự động Tối ưu hiệu năng với parallel testing Giám sát và nhận cảnh báo qua email Quét lỗi bảo mật tự động với CodeQL 📚 Nội dung Workshop Giới thiệu - Tổng quan về testing framework Chuẩn bị môi trường - Setup AWS và tools cần thiết Unit Testing - Viết test và cấu hình CodeBuild Parallel Execution - Chạy test song song Monitoring \u0026amp; Alerts - Theo dõi và cảnh báo Security Testing - Quét bảo mật với CodeQL Clean Up - Dọn dẹp tài nguyên 🎓 Yêu cầu Kiến thức cơ bản về C# và .NET Tài khoản AWS (Free tier) Tài khoản GitHub Visual Studio Code hoặc Visual Studio Workshop này được thiết kế để hoàn thành trong 2-3 giờ. Bạn có thể chia nhỏ thành nhiều phiên học.\n"
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://duyvh10102003.github.io/aws-workshop-demo/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]